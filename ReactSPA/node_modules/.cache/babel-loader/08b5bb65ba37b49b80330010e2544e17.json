{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\ReactSPA\\\\src\\\\components\\\\Pages\\\\RegisterPage\\\\RegisterForm\\\\RegisterForm.tsx\";\nimport { Component } from 'react';\nimport TextFormField from \"../../../shared/textformfield/TextFormField\";\nimport SubmitFormButton from \"../../../shared/submitformbutton/SubmitFormButton\";\nimport { validateEmail, validateNumber } from \"../../../shared/utils/functions\";\nimport \"./RegisterForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RegisterForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fieldType: \"login\",\n      login: \"\",\n      password: \"\",\n      loginAlertMessage: \"\",\n      passwordAlertMessage: \"\",\n      rpasswordAlertMessage: \"\"\n    };\n\n    this.validateEmail = text => validateEmail(text);\n\n    this.validateNumber = text => validateNumber(text);\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n    };\n\n    this.handleChange = (fieldName, fieldValue) => {\n      let fieldNames = new Set([\"login\", \"password\", \"rpassword\"]);\n      fieldName = fieldName.toLocaleLowerCase().trim();\n\n      if (fieldNames.has(fieldName)) {\n        if (fieldName === \"login\") {\n          if (fieldValue === \"\") this.setState({\n            fieldType: \"login\",\n            loginAlertMessage: \"\"\n          });else if (!isNaN(parseInt(fieldValue))) {\n            if (this.validateNumber(fieldValue)) {\n              this.setState({\n                'login': fieldValue\n              });\n              this.setState({\n                fieldType: \"phone\",\n                loginAlertMessage: \"success\"\n              });\n            } else this.setState({\n              fieldType: \"phone\",\n              loginAlertMessage: \"Invalid Phone number!\"\n            });\n          } else if (`${fieldValue}`.includes(\"@\")) {\n            if (this.validateEmail(fieldValue)) {\n              this.setState({\n                \"login\": fieldValue\n              });\n              this.setState({\n                fieldType: \"email\",\n                loginAlertMessage: \"success\"\n              });\n            } else this.setState({\n              fieldType: \"email\",\n              loginAlertMessage: \"invalid email!\"\n            });\n          } else this.setState({\n            fieldType: \"login\",\n            loginAlertMessage: \"Invalid field! Choose either email or phone to login\"\n          });\n        } else if (fieldName === \"password\") {\n          if (fieldValue.length >= 6 || fieldValue.length === 0) {\n            if (fieldValue.length >= 6) this.setState({\n              password: fieldValue,\n              passwordAlertMessage: \"success\"\n            });else this.setState({\n              password: fieldValue,\n              passwordAlertMessage: \"\"\n            });\n          } else this.setState({\n            passwordAlertMessage: \"Password must contains at least 6 characters\"\n          });\n        } else if (fieldName === \"rpassword\") {\n          if (this.state.password !== fieldValue) this.setState({\n            rpasswordAlertMessage: \"Your password must be same\"\n          });else {\n            if (fieldValue !== \"\") this.setState({\n              rpasswordAlertMessage: \"success\"\n            });else this.setState({\n              rpasswordAlertMessage: \"\"\n            });\n          }\n        }\n      }\n    };\n\n    this.handleLeave = (fieldName, fieldValue) => {};\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"register-form\",\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextFormField, {\n        fieldType: this.state.fieldType,\n        fieldName: \"login\",\n        placeHolder: \"Enter email or phone number\",\n        alertMessage: this.state.loginAlertMessage,\n        onChange: this.handleChange,\n        onBlur: this.handleLeave\n      }, \"register-form-field1\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextFormField, {\n        fieldType: \"password\",\n        fieldName: \"password\",\n        placeHolder: \"Enter your password\",\n        alertMessage: this.state.passwordAlertMessage,\n        onChange: this.handleChange,\n        onBlur: this.handleLeave\n      }, \"register-form-field2\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextFormField, {\n        fieldType: \"password\",\n        fieldName: \"rpassword\",\n        placeHolder: \"Enter your password again\",\n        alertMessage: this.state.rpasswordAlertMessage,\n        onChange: this.handleChange,\n        onBlur: this.handleLeave\n      }, \"register-form-field3\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SubmitFormButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RegisterForm;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/Pages/RegisterPage/RegisterForm/RegisterForm.tsx"],"names":["Component","TextFormField","SubmitFormButton","validateEmail","validateNumber","RegisterForm","state","fieldType","login","password","loginAlertMessage","passwordAlertMessage","rpasswordAlertMessage","text","handleSubmit","event","preventDefault","handleChange","fieldName","fieldValue","fieldNames","Set","toLocaleLowerCase","trim","has","setState","isNaN","parseInt","includes","length","handleLeave","render"],"mappings":"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","sourcesContent":["import { Component, FormEvent } from 'react';\r\nimport TextFormField from \"../../../shared/textformfield/TextFormField\";\r\nimport SubmitFormButton from \"../../../shared/submitformbutton/SubmitFormButton\";\r\n\r\nimport { validateEmail, validateNumber } from \"../../../shared/utils/functions\";\r\n\r\nimport \"./RegisterForm.css\"\r\n\r\nclass RegisterForm extends Component\r\n{    \r\n    state = {\r\n        fieldType: \"login\",\r\n        login:\"\",\r\n        password:\"\",\r\n        loginAlertMessage:\"\",\r\n        passwordAlertMessage: \"\",\r\n        rpasswordAlertMessage: \"\"\r\n    }\r\n\r\n    validateEmail = (text:string) => validateEmail(text)\r\n    validateNumber = (text:string) => validateNumber(text)\r\n\r\n    handleSubmit = (event:FormEvent) => {\r\n        event.preventDefault()\r\n    }\r\n\r\n    handleChange = (fieldName:string, fieldValue:string) => {\r\n        let fieldNames = new Set([\"login\", \"password\", \"rpassword\"])\r\n        fieldName = fieldName.toLocaleLowerCase().trim() \r\n        if(fieldNames.has(fieldName))\r\n        {\r\n            if(fieldName === \"login\")\r\n            {\r\n                if(fieldValue === \"\")\r\n                    this.setState({fieldType: \"login\", loginAlertMessage: \"\"})\r\n                else if(!isNaN(parseInt(fieldValue)))\r\n                {\r\n                    if(this.validateNumber(fieldValue))\r\n                    {\r\n                        this.setState({'login' : fieldValue})\r\n                        this.setState({fieldType: \"phone\", loginAlertMessage: \"success\"})\r\n                    }\r\n                    else\r\n                        this.setState({fieldType: \"phone\", loginAlertMessage: \"Invalid Phone number!\"})\r\n                }\r\n                else if(`${fieldValue}`.includes(\"@\"))\r\n                {\r\n                    if(this.validateEmail(fieldValue))\r\n                    {\r\n                        this.setState({\"login\" : fieldValue})\r\n                        this.setState({fieldType: \"email\", loginAlertMessage: \"success\"})\r\n                    }\r\n                    else\r\n                        this.setState({fieldType: \"email\", loginAlertMessage: \"invalid email!\"})\r\n                }\r\n                else\r\n                    this.setState({fieldType: \"login\", loginAlertMessage: \"Invalid field! Choose either email or phone to login\"})\r\n            }\r\n            else if (fieldName === \"password\")\r\n            {\r\n                if(fieldValue.length >= 6 || fieldValue.length === 0)\r\n                {\r\n                    if(fieldValue.length >= 6)\r\n                        this.setState({password:fieldValue, passwordAlertMessage: \"success\"})\r\n                    else\r\n                        this.setState({password:fieldValue, passwordAlertMessage: \"\"})\r\n                }\r\n                else \r\n                    this.setState({passwordAlertMessage: \"Password must contains at least 6 characters\"})\r\n            }\r\n            else if (fieldName === \"rpassword\")\r\n            {\r\n                if(this.state.password !== fieldValue)\r\n                    this.setState({rpasswordAlertMessage: \"Your password must be same\"})\r\n                else\r\n                {\r\n                    if(fieldValue !== \"\")\r\n                        this.setState({rpasswordAlertMessage: \"success\"})\r\n                    else\r\n                        this.setState({rpasswordAlertMessage: \"\"})\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    handleLeave = (fieldName:string, fieldValue:string) =>\r\n    {\r\n        \r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <form className = \"register-form\" onSubmit = {this.handleSubmit}>\r\n                <TextFormField fieldType = {this.state.fieldType} fieldName = \"login\" placeHolder = \"Enter email or phone number\"  alertMessage = {this.state.loginAlertMessage} onChange = {this.handleChange} onBlur = {this.handleLeave} key = \"register-form-field1\" />\r\n                <TextFormField fieldType = \"password\" fieldName = \"password\" placeHolder = \"Enter your password\" alertMessage = {this.state.passwordAlertMessage} onChange = {this.handleChange} onBlur = {this.handleLeave} key = \"register-form-field2\"/>\r\n                <TextFormField fieldType = \"password\" fieldName = \"rpassword\" placeHolder = \"Enter your password again\" alertMessage = {this.state.rpasswordAlertMessage} onChange = {this.handleChange} onBlur = {this.handleLeave} key = \"register-form-field3\"/>\r\n                <SubmitFormButton />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RegisterForm"]},"metadata":{},"sourceType":"module"}