{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\ReactSPA\\\\src\\\\components\\\\Pages\\\\HomePage\\\\HomePage.tsx\";\nimport { Component } from \"react\";\nimport { initializeApp } from \"firebase/app\";\nimport { getMessaging, getToken } from \"firebase/messaging\";\nimport Body from \"./Body/Body\";\nimport Head from \"./Head/Head\";\nimport Cookies from 'universal-cookie';\nimport { requestWithoutBody } from \"../../shared/utils/functions\";\nimport firebaseSettings from \"./../../../firebasesettings.json\";\nimport settings from './../../../settings.json';\nimport \"./HomePage.css\";\nimport SpinnerProgress from '../../shared/SpinnerProgress/SpinnerProgress'; // \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass HomePage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.cookies = new Cookies();\n    this.settings = settings;\n    this._id = \"\";\n    this.state = {\n      displayReceiverInformation: false,\n      dataAreGetted: false,\n      receiverProfile: {\n        id: this._id,\n        email: \"\",\n        name: \"\",\n        category: \"person\",\n        image: \"\"\n      },\n      senderProfile: {\n        id: this._id,\n        email: \"\",\n        name: \"\",\n        category: \"person\",\n        image: \"\"\n      }\n    };\n    this.firebaseSettings = firebaseSettings;\n    this.app = null;\n    this.messaging = null;\n    this.props = this.props;\n\n    this.sucessGetMessages = response => {\n      console.log(response);\n    };\n\n    this.errorGetMessage = error => {};\n\n    this.loadData = () => {\n      let userId = this.cookies.get(\"userId\");\n    };\n\n    this.successGetProfileFunction = result => {\n      let _keys = Object.keys(result);\n\n      if (_keys.includes(\"userProfileId\")) {\n        this.setState({\n          senderProfile: {\n            id: result.userProfileId,\n            identity: result.userProfile.identity,\n            name: result.userProfile.username,\n            category: \"person\",\n            image: \"\"\n          },\n          dataAreGetted: true\n        });\n        let date = new Date();\n        let expirationDate = new Date();\n        expirationDate.setMinutes(date.getMinutes() + 7 * 24 * 60);\n        this.cookies.set(\"deviceUsedId\", result.id, {\n          sameSite: true,\n          expires: expirationDate\n        });\n        this.cookies.set(\"userProfileId\", result.userProfileId, {\n          sameSite: true,\n          expires: expirationDate\n        });\n      } else {\n        //Replace by modal\n        alert(\"Sorry we are not able to get some important information. We inform our team about it.\");\n      }\n    };\n\n    this.errorGetProfileFunction = error => {\n      //Replace with model or alert zone\n      alert(\"Sorry we are not able to perform operation. Check your internet connexion\");\n    };\n\n    this.componentDidMount = () => {\n      var _this$cookies$get;\n\n      //Get userprofileid\n      requestWithoutBody(`${this.settings.host}/api/DeviceUsed?devicePlatform=${this.settings.devicePlatform}`, \"PUT\", (_this$cookies$get = this.cookies.get('token')) !== null && _this$cookies$get !== void 0 ? _this$cookies$get : \"\", this.successGetProfileFunction, this.errorGetProfileFunction);\n      this.app = initializeApp(this.firebaseSettings.firebaseConfig);\n      this.messaging = getMessaging(this.app);\n      var keys = {\n        vapidKey: this.firebaseSettings.VAPID\n      };\n      console.log(\"device used token\", this.cookies.get(\"deviceUsedId\"));\n      getToken(keys).then(currentToken => {\n        if (currentToken) {\n          console.log(\"token is getted from firebase\", currentToken);\n          requestWithoutBody(`${settings.host}/api/DeviceUsed/RegisterFcmToken?deviceUsedId=${this.cookies.get(\"deviceUsedId\")}&fcmToken=${currentToken}`, \"PATCH\", this.props.authToken, this.successSendingFirebaseTokenToServer, this.errorSendingFirebaseTokenToServer);\n        } else {\n          // Show permission request UI\n          console.log('No registration token available. Request permission to generate one.'); // ...\n        }\n      }).catch(err => {\n        console.log('An error occurred while retrieving token. ', err); // ...\n      });\n      ;\n    };\n\n    this.successSendingFirebaseTokenToServer = result => {\n      console.log(\"response body\");\n    };\n\n    this.errorSendingFirebaseTokenToServer = error => {\n      console.log(\"error\");\n    };\n\n    this.getReceiverInformation = (identity, id, name, category) => {\n      if (identity !== \"\") //|| id !== \"\" || name !== \"\"\n        {\n          this.setState({\n            displayReceiverInformation: true\n          });\n          this.setState({\n            receiverProfile: {\n              identity,\n              id,\n              name,\n              category,\n              image: \"\"\n            }\n          });\n        }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home-page\",\n      children: !this.state.dataAreGetted ? /*#__PURE__*/_jsxDEV(SpinnerProgress, {\n        size: 1,\n        message: \"Please wait we collecting your data\",\n        textSize: \"fs-4\",\n        textInside: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 18\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Head, {\n          displayReceiverInformation: this.state.displayReceiverInformation,\n          receiverProfile: this.state.receiverProfile,\n          senderProfile: this.state.senderProfile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Body, {\n          getReceiverInformation: this.getReceiverInformation,\n          userProfileId: this.state.senderProfile.id,\n          authToken: this.cookies.get(\"token\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/Pages/HomePage/HomePage.tsx"],"names":["Component","initializeApp","getMessaging","getToken","Body","Head","Cookies","requestWithoutBody","firebaseSettings","settings","SpinnerProgress","HomePage","cookies","_id","state","displayReceiverInformation","dataAreGetted","receiverProfile","id","email","name","category","image","senderProfile","app","messaging","props","sucessGetMessages","response","console","log","errorGetMessage","error","loadData","userId","get","successGetProfileFunction","result","_keys","Object","keys","includes","setState","userProfileId","identity","userProfile","username","date","Date","expirationDate","setMinutes","getMinutes","set","sameSite","expires","alert","errorGetProfileFunction","componentDidMount","host","devicePlatform","firebaseConfig","vapidKey","VAPID","then","currentToken","authToken","successSendingFirebaseTokenToServer","errorSendingFirebaseTokenToServer","catch","err","getReceiverInformation","render"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,SAASC,aAAT,QAA2C,cAA3C;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAkD,oBAAlD;AAEA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAA0BC,kBAA1B,QAAoD,8BAApD;AAEA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,QAAP,MAAqB,0BAArB;AAEA,OAAO,gBAAP;AACA,OAAOC,eAAP,MAA4B,8CAA5B,C,CACA;;;;;AACA,MAAMC,QAAN,SAAuBX,SAAvB,CACA;AAAA;AAAA;AAAA,SACIY,OADJ,GACc,IAAIN,OAAJ,EADd;AAAA,SAEIG,QAFJ,GAEeA,QAFf;AAAA,SAGII,GAHJ,GAGwB,EAHxB;AAAA,SAIIC,KAJJ,GAIY;AACJC,MAAAA,0BAA0B,EAAG,KADzB;AAEJC,MAAAA,aAAa,EAAE,KAFX;AAGJC,MAAAA,eAAe,EAAG;AACdC,QAAAA,EAAE,EAAG,KAAKL,GADI;AAEdM,QAAAA,KAAK,EAAE,EAFO;AAGdC,QAAAA,IAAI,EAAE,EAHQ;AAIdC,QAAAA,QAAQ,EAAE,QAJI;AAKdC,QAAAA,KAAK,EAAE;AALO,OAHd;AAUJC,MAAAA,aAAa,EAAG;AACZL,QAAAA,EAAE,EAAG,KAAKL,GADE;AAEZM,QAAAA,KAAK,EAAE,EAFK;AAGZC,QAAAA,IAAI,EAAE,EAHM;AAIZC,QAAAA,QAAQ,EAAE,QAJE;AAKZC,QAAAA,KAAK,EAAE;AALK;AAVZ,KAJZ;AAAA,SAuBId,gBAvBJ,GAuBuBA,gBAvBvB;AAAA,SAyBIgB,GAzBJ,GAyB4B,IAzB5B;AAAA,SA0BIC,SA1BJ,GA0B+B,IA1B/B;AAAA,SA4BIC,KA5BJ,GA4BgB,KAAKA,KA5BrB;;AAAA,SA8BIC,iBA9BJ,GA8ByBC,QAAD,IAAiB;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACH,KAhCL;;AAAA,SAkCIG,eAlCJ,GAkCuBC,KAAD,IAAc,CAE/B,CApCL;;AAAA,SAsCIC,QAtCJ,GAsCe,MAAM;AACb,UAAIC,MAAM,GAAG,KAAKtB,OAAL,CAAauB,GAAb,CAAiB,QAAjB,CAAb;AACH,KAxCL;;AAAA,SA0CIC,yBA1CJ,GA0CiCC,MAAD,IAAgB;AACxC,UAAIC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYH,MAAZ,CAAZ;;AACA,UAAGC,KAAK,CAACG,QAAN,CAAe,eAAf,CAAH,EACA;AAEI,aAAKC,QAAL,CAAc;AAACnB,UAAAA,aAAa,EAAG;AAC3BL,YAAAA,EAAE,EAAGmB,MAAM,CAACM,aADe;AAE3BC,YAAAA,QAAQ,EAAEP,MAAM,CAACQ,WAAP,CAAmBD,QAFF;AAG3BxB,YAAAA,IAAI,EAAEiB,MAAM,CAACQ,WAAP,CAAmBC,QAHE;AAI3BzB,YAAAA,QAAQ,EAAE,QAJiB;AAK3BC,YAAAA,KAAK,EAAE;AALoB,WAAjB;AAOVN,UAAAA,aAAa,EAAC;AAPJ,SAAd;AASA,YAAI+B,IAAI,GAAG,IAAIC,IAAJ,EAAX;AACA,YAAIC,cAAc,GAAG,IAAID,IAAJ,EAArB;AACAC,QAAAA,cAAc,CAACC,UAAf,CAA0BH,IAAI,CAACI,UAAL,KAAoB,IAAI,EAAJ,GAAS,EAAvD;AACA,aAAKvC,OAAL,CAAawC,GAAb,CAAiB,cAAjB,EAAiCf,MAAM,CAACnB,EAAxC,EAA4C;AAACmC,UAAAA,QAAQ,EAAE,IAAX;AAAiBC,UAAAA,OAAO,EAACL;AAAzB,SAA5C;AACA,aAAKrC,OAAL,CAAawC,GAAb,CAAiB,eAAjB,EAAkCf,MAAM,CAACM,aAAzC,EAAwD;AAACU,UAAAA,QAAQ,EAAE,IAAX;AAAiBC,UAAAA,OAAO,EAACL;AAAzB,SAAxD;AACH,OAjBD,MAmBA;AACI;AACAM,QAAAA,KAAK,CAAC,uFAAD,CAAL;AACH;AACJ,KAnEL;;AAAA,SAqEIC,uBArEJ,GAqE+BxB,KAAD,IAAe;AACrC;AACAuB,MAAAA,KAAK,CAAC,2EAAD,CAAL;AACH,KAxEL;;AAAA,SA0EIE,iBA1EJ,GA0EwB,MAAM;AAAA;;AACtB;AACAlD,MAAAA,kBAAkB,CAAE,GAAE,KAAKE,QAAL,CAAciD,IAAK,kCAAiC,KAAKjD,QAAL,CAAckD,cAAe,EAArF,EAAwF,KAAxF,uBAA+F,KAAK/C,OAAL,CAAauB,GAAb,CAAiB,OAAjB,CAA/F,iEAA0H,EAA1H,EAA8H,KAAKC,yBAAnI,EAA8J,KAAKoB,uBAAnK,CAAlB;AAEA,WAAKhC,GAAL,GAAWvB,aAAa,CAAC,KAAKO,gBAAL,CAAsBoD,cAAvB,CAAxB;AACA,WAAKnC,SAAL,GAAiBvB,YAAY,CAAC,KAAKsB,GAAN,CAA7B;AAEA,UAAIgB,IAAQ,GAAG;AAACqB,QAAAA,QAAQ,EAAE,KAAKrD,gBAAL,CAAsBsD;AAAjC,OAAf;AACAjC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,KAAKlB,OAAL,CAAauB,GAAb,CAAiB,cAAjB,CAAjC;AACAhC,MAAAA,QAAQ,CAACqC,IAAD,CAAR,CAAeuB,IAAf,CAAqBC,YAAD,IAAkB;AAClC,YAAIA,YAAJ,EAAkB;AACdnC,UAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CkC,YAA7C;AACAzD,UAAAA,kBAAkB,CACb,GAAEE,QAAQ,CAACiD,IAAK,iDAAgD,KAAK9C,OAAL,CAAauB,GAAb,CAAiB,cAAjB,CAAiC,aAAY6B,YAAa,EAD7G,EAEd,OAFc,EAGd,KAAKtC,KAAL,CAAWuC,SAHG,EAId,KAAKC,mCAJS,EAKd,KAAKC,iCALS,CAAlB;AAOH,SATD,MASO;AACL;AACAtC,UAAAA,OAAO,CAACC,GAAR,CAAY,sEAAZ,EAFK,CAGL;AACD;AACF,OAfH,EAeKsC,KAfL,CAeYC,GAAD,IAAS;AAChBxC,QAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DuC,GAA1D,EADgB,CAEhB;AACD,OAlBH;AAkBK;AACR,KAtGL;;AAAA,SAwGIH,mCAxGJ,GAwG2C7B,MAAD,IAAe;AACjDR,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,KA1GL;;AAAA,SA4GIqC,iCA5GJ,GA4GyCnC,KAAD,IAAc;AAC9CH,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH,KA9GL;;AAAA,SAiHIwC,sBAjHJ,GAiH6B,CAAC1B,QAAD,EAAkB1B,EAAlB,EAAoCE,IAApC,EAAiDC,QAAjD,KAA4E;AACjG,UAAGuB,QAAQ,KAAK,EAAhB,EAAoB;AACpB;AACI,eAAKF,QAAL,CAAc;AAAC3B,YAAAA,0BAA0B,EAAE;AAA7B,WAAd;AACA,eAAK2B,QAAL,CAAc;AAACzB,YAAAA,eAAe,EAAE;AAAC2B,cAAAA,QAAD;AAAW1B,cAAAA,EAAX;AAAeE,cAAAA,IAAf;AAAqBC,cAAAA,QAArB;AAA+BC,cAAAA,KAAK,EAAG;AAAvC;AAAlB,WAAd;AACH;AACJ,KAvHL;AAAA;;AAyHIiD,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACE,CAAC,KAAKzD,KAAL,CAAWE,aAAb,gBACI,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAI,CAAzB;AAA4B,QAAA,OAAO,EAAC,qCAApC;AAA0E,QAAA,QAAQ,EAAC,MAAnF;AAA0F,QAAA,UAAU,EAAI;AAAxG;AAAA;AAAA;AAAA;AAAA,cADJ,gBAEI;AAAA,gCACG,QAAC,IAAD;AAAM,UAAA,0BAA0B,EAAI,KAAKF,KAAL,CAAWC,0BAA/C;AAA2E,UAAA,eAAe,EAAI,KAAKD,KAAL,CAAWG,eAAzG;AAA0H,UAAA,aAAa,EAAI,KAAKH,KAAL,CAAWS;AAAtJ;AAAA;AAAA;AAAA;AAAA,gBADH,eAEG,QAAC,IAAD;AAAM,UAAA,sBAAsB,EAAI,KAAK+C,sBAArC;AAA6D,UAAA,aAAa,EAAE,KAAKxD,KAAL,CAAWS,aAAX,CAAyBL,EAArG;AAAyG,UAAA,SAAS,EAAI,KAAKN,OAAL,CAAauB,GAAb,CAAiB,OAAjB;AAAtH;AAAA;AAAA;AAAA;AAAA,gBAFH;AAAA;AAHL;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AArIL;;AAwIA,eAAexB,QAAf","sourcesContent":["import { Component } from \"react\";\r\n\r\nimport { initializeApp, FirebaseApp } from \"firebase/app\";\r\nimport { getMessaging, getToken, Messaging } from \"firebase/messaging\";\r\n\r\nimport Body from \"./Body/Body\";\r\nimport Head from \"./Head/Head\";\r\nimport Cookies from 'universal-cookie';\r\nimport { requestWithBody, requestWithoutBody } from \"../../shared/utils/functions\";\r\n\r\nimport firebaseSettings from \"./../../../firebasesettings.json\"\r\nimport settings from './../../../settings.json';\r\n\r\nimport \"./HomePage.css\"\r\nimport SpinnerProgress from '../../shared/SpinnerProgress/SpinnerProgress';\r\n// \r\nclass HomePage extends Component\r\n{\r\n    cookies = new Cookies()\r\n    settings = settings\r\n    _id:string|number = \"\"\r\n    state = {\r\n        displayReceiverInformation : false,\r\n        dataAreGetted: false,\r\n        receiverProfile : {\r\n            id : this._id,\r\n            email: \"\",\r\n            name: \"\",\r\n            category: \"person\",\r\n            image: \"\"\r\n        },\r\n        senderProfile : {\r\n            id : this._id,\r\n            email: \"\",\r\n            name: \"\",\r\n            category: \"person\",\r\n            image: \"\"\r\n        }\r\n    }\r\n\r\n    firebaseSettings = firebaseSettings\r\n\r\n    app:FirebaseApp |null = null\r\n    messaging:Messaging|null = null\r\n\r\n    props:any = this.props\r\n\r\n    sucessGetMessages = (response:any) =>{\r\n        console.log(response)\r\n    }\r\n\r\n    errorGetMessage = (error:any) =>{\r\n\r\n    }\r\n\r\n    loadData = () => {\r\n        let userId = this.cookies.get(\"userId\")\r\n    }\r\n\r\n    successGetProfileFunction = (result:any) => {\r\n        let _keys = Object.keys(result);\r\n        if(_keys.includes(\"userProfileId\"))\r\n        {\r\n\r\n            this.setState({senderProfile : {\r\n                id : result.userProfileId,\r\n                identity: result.userProfile.identity,\r\n                name: result.userProfile.username,\r\n                category: \"person\",\r\n                image: \"\"\r\n                }, \r\n                dataAreGetted:true\r\n            })\r\n            let date = new Date()\r\n            let expirationDate = new Date()\r\n            expirationDate.setMinutes(date.getMinutes() + 7 * 24 * 60)  \r\n            this.cookies.set(\"deviceUsedId\", result.id, {sameSite: true, expires:expirationDate})\r\n            this.cookies.set(\"userProfileId\", result.userProfileId, {sameSite: true, expires:expirationDate})   \r\n        }\r\n        else\r\n        {\r\n            //Replace by modal\r\n            alert(\"Sorry we are not able to get some important information. We inform our team about it.\")\r\n        }\r\n    }\r\n\r\n    errorGetProfileFunction = (error:any) => {\r\n        //Replace with model or alert zone\r\n        alert(\"Sorry we are not able to perform operation. Check your internet connexion\")\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        //Get userprofileid\r\n        requestWithoutBody(`${this.settings.host}/api/DeviceUsed?devicePlatform=${this.settings.devicePlatform}`, \"PUT\", this.cookies.get('token')??\"\", this.successGetProfileFunction, this.errorGetProfileFunction)\r\n        \r\n        this.app = initializeApp(this.firebaseSettings.firebaseConfig)\r\n        this.messaging = getMessaging(this.app);\r\n        \r\n        var keys:any = {vapidKey: this.firebaseSettings.VAPID}\r\n        console.log(\"device used token\", this.cookies.get(\"deviceUsedId\"))\r\n        getToken(keys).then((currentToken) => {\r\n            if (currentToken) {\r\n                console.log(\"token is getted from firebase\", currentToken)\r\n                requestWithoutBody(\r\n                    `${settings.host}/api/DeviceUsed/RegisterFcmToken?deviceUsedId=${this.cookies.get(\"deviceUsedId\")}&fcmToken=${currentToken}`, \r\n                    \"PATCH\", \r\n                    this.props.authToken, \r\n                    this.successSendingFirebaseTokenToServer, \r\n                    this.errorSendingFirebaseTokenToServer\r\n                )\r\n            } else {\r\n              // Show permission request UI\r\n              console.log('No registration token available. Request permission to generate one.');\r\n              // ...\r\n            }\r\n          }).catch((err) => {\r\n            console.log('An error occurred while retrieving token. ', err);\r\n            // ...\r\n          });;\r\n    }\r\n\r\n    successSendingFirebaseTokenToServer = (result:any) =>{\r\n        console.log(\"response body\")\r\n    }\r\n\r\n    errorSendingFirebaseTokenToServer = (error:any) =>{\r\n        console.log(\"error\")\r\n    }\r\n\r\n\r\n    getReceiverInformation = (identity:string, id:number|string, name:string, category:string|number) => {\r\n        if(identity !== \"\" )//|| id !== \"\" || name !== \"\"\r\n        {\r\n            this.setState({displayReceiverInformation: true})\r\n            this.setState({receiverProfile: {identity, id, name, category, image : \"\"}})\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"home-page\">\r\n            {(!this.state.dataAreGetted)?\r\n                 <SpinnerProgress size = {1} message=\"Please wait we collecting your data\" textSize=\"fs-4\" textInside = {true} />\r\n                :<>\r\n                    <Head displayReceiverInformation = {this.state.displayReceiverInformation} receiverProfile = {this.state.receiverProfile} senderProfile = {this.state.senderProfile} />\r\n                    <Body getReceiverInformation = {this.getReceiverInformation} userProfileId={this.state.senderProfile.id} authToken = {this.cookies.get(\"token\")} />\r\n                </>\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HomePage"]},"metadata":{},"sourceType":"module"}