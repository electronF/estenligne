{"ast":null,"code":"function validateEmail(text) {\n  let exp = /^([a-zA-Z0-9_\\-.]+)@((\\[\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.)|(([a-zA-Z0-9-]+\\.)+))([a-zA-Z]{2,4}|\\d{1,3})(\\]?)$/;\n  return exp.test(text);\n}\n\nfunction validatePassword(text) {\n  return text.length >= 6;\n}\n\nfunction convert2Two2DigitsNumber(value) {}\n\nfunction seconds2Time(seconds) {}\n\nfunction getMediaType(text) {\n  var videoExtension = [\"mp4\", \"mov\", \"wmv\", \"avi\", \"avi\", \"avchd\", \"flv\", \"f4v\", \"swf\", \"mkv\", \"webm\", \"mpeg\", \"amv\", \"3gp\", \"3gp\", \"html5\"];\n  var audioExtension = [\"mp3\", \"ogg\", \"wav\"];\n  var imageExtension = [\"bmp\", \"gif\", \"jpg\", \"jpeg\", \"png\", \"tif\", \"tiff\", \"raw\", \"eps\", \"cr2\", \"nef\", \"orf\", \"sr2\"];\n  var docExtension = [\"txt\", \"pdf\", \"doc\", \"docx\", \"ppt\", \"pptx\", \"xls\", \"csv\"];\n  var lastDotPosition = text.lastIndexOf('.');\n  var ext = \"\"; //text\n\n  if (lastDotPosition > -1) {\n    ext = text.substring(lastDotPosition + 1);\n    if (videoExtension.includes(ext)) return `video/${ext}`;else if (audioExtension.includes(ext)) return `audio/${ext}`;else if (imageExtension.includes(ext)) return `image/${ext}`;else if (docExtension.includes(ext)) return `application/${ext}`;\n  }\n\n  return `unknow/${ext}`;\n}\n\nfunction getFileSize(size) {\n  var oneKiloOctects = 1024;\n  var onMegaOctects = 1024 * 1024;\n  var megaOctects = Math.floor(size / onMegaOctects);\n  return megaOctects > 0 ? `${Math.round(megaOctects * 10) / 10}MO` : `${Math.ceil(size / oneKiloOctects)}KO`;\n}\n\nfunction validateNumber(text) {\n  let exp = /^((00)|(\\+\\d+))?(\\d{6,})$/;\n  return exp.test(text);\n}\n/**\r\n * \r\n * @param url the url\r\n * @param type the type of query POST, GET, PUT, DELETE\r\n * @param data Key value object\r\n * @param successFunction Success function\r\n * @param errorFunction Error function\r\n */\n\n\nfunction requestWithBody(url, type, data, token, successFunction, errorFunction) {\n  fetch(url, {\n    \"method\": type,\n    \"headers\": {\n      \"content-type\": \"application/json\",\n      \"accept\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    },\n    \"body\": JSON.stringify(data)\n  }).then(response => response.json()).then(result => {\n    successFunction(result);\n  }, error => {\n    errorFunction(error);\n  });\n}\n/**\r\n * \r\n * @param url the endpoint where to send data\r\n * @param type the type of query GET, DELETE\r\n * @param successFunction Success function\r\n * @param errorFunction Error function\r\n */\n\n\nfunction requestWithoutBody(url, type, token, successFunction, errorFunction) {\n  fetch(url, {\n    \"method\": type,\n    \"headers\": {\n      \"content-type\": \"application/json\",\n      \"accept\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  }).then(response => response.json()).then(result => {\n    successFunction(result);\n  }, error => {\n    errorFunction(error);\n  });\n}\n\nfunction getMessageTime(datetime) {\n  let time = datetime.split(\"T\")[1].split('+')[0];\n  let to = time.lastIndexOf(\":\");\n  return time.substring(0, to);\n}\n\nexport { validateEmail, validateNumber, validatePassword, getMediaType, getFileSize, requestWithBody, requestWithoutBody, getMessageTime, seconds2Time };","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/shared/utils/functions.tsx"],"names":["validateEmail","text","exp","test","validatePassword","length","convert2Two2DigitsNumber","value","seconds2Time","seconds","getMediaType","videoExtension","audioExtension","imageExtension","docExtension","lastDotPosition","lastIndexOf","ext","substring","includes","getFileSize","size","oneKiloOctects","onMegaOctects","megaOctects","Math","floor","round","ceil","validateNumber","requestWithBody","url","type","data","token","successFunction","errorFunction","fetch","JSON","stringify","then","response","json","result","error","requestWithoutBody","getMessageTime","datetime","time","split","to"],"mappings":"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","sourcesContent":["function validateEmail(text:string) \r\n{\r\n    let exp = /^([a-zA-Z0-9_\\-.]+)@((\\[\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.)|(([a-zA-Z0-9-]+\\.)+))([a-zA-Z]{2,4}|\\d{1,3})(\\]?)$/\r\n    return exp.test(text)\r\n}\r\n\r\nfunction validatePassword(text:string)\r\n{\r\n    return text.length >= 6\r\n}\r\n\r\nfunction convert2Two2DigitsNumber(value:number)\r\n{\r\n\r\n}\r\n\r\nfunction seconds2Time(seconds:number)\r\n{\r\n    \r\n}\r\n\r\nfunction getMediaType(text:string)\r\n{\r\n    var videoExtension = [\r\n        \"mp4\", \"mov\", \"wmv\", \"avi\",\r\n        \"avi\", \"avchd\", \"flv\", \"f4v\",\r\n        \"swf\", \"mkv\", \"webm\", \"mpeg\",\r\n        \"amv\", \"3gp\", \"3gp\", \"html5\"\r\n        ]\r\n\r\n    var audioExtension = [\r\n        \"mp3\", \"ogg\", \"wav\", \r\n    ]\r\n\r\n    var imageExtension = [\r\n        \"bmp\", \"gif\", \"jpg\", \"jpeg\",\r\n        \"png\", \"tif\", \"tiff\", \"raw\",\r\n        \"eps\", \"cr2\", \"nef\", \"orf\",\r\n        \"sr2\"\r\n    ]\r\n\r\n    var docExtension = [\r\n        \"txt\", \"pdf\", \"doc\",\"docx\",\r\n        \"ppt\", \"pptx\", \"xls\", \"csv\"\r\n    ]\r\n\r\n    var lastDotPosition = text.lastIndexOf('.')\r\n    var ext = \"\"//text\r\n    if(lastDotPosition > -1)\r\n    {\r\n        ext = text.substring(lastDotPosition + 1)\r\n        if(videoExtension.includes(ext))\r\n            return `video/${ext}`\r\n        else if (audioExtension.includes(ext))\r\n            return `audio/${ext}`\r\n        else if(imageExtension.includes(ext))\r\n            return `image/${ext}`\r\n        else if (docExtension.includes(ext))\r\n            return `application/${ext}`\r\n    }\r\n    return `unknow/${ext}`\r\n}\r\n\r\nfunction getFileSize(size:number)\r\n{\r\n    var oneKiloOctects = 1024 \r\n    var onMegaOctects = 1024 * 1024\r\n\r\n    var megaOctects = Math.floor(size / onMegaOctects)\r\n    return ((megaOctects>0)?(`${Math.round(megaOctects * 10)/10}MO`):(`${Math.ceil(size / oneKiloOctects)}KO`))\r\n}\r\n\r\nfunction validateNumber(text:string) \r\n{\r\n    let exp = /^((00)|(\\+\\d+))?(\\d{6,})$/\r\n    return exp.test(text)\r\n}\r\n\r\n/**\r\n * \r\n * @param url the url\r\n * @param type the type of query POST, GET, PUT, DELETE\r\n * @param data Key value object\r\n * @param successFunction Success function\r\n * @param errorFunction Error function\r\n */\r\n function requestWithBody(url:string, type:string, data:Object, token:string, successFunction:Function, errorFunction:Function)\r\n {    \r\n     fetch(url, {\r\n         \"method\": type,\r\n         \"headers\": {\r\n             \"content-type\": \"application/json\",\r\n             \"accept\": \"application/json\",\r\n             \"Authorization\": `Bearer ${token}`\r\n         },\r\n         \"body\": JSON.stringify(data)\r\n         }).then(response => response.json())\r\n         .then(\r\n             (result) => {\r\n                successFunction(result)\r\n             },\r\n             (error) => {\r\n                errorFunction(error)\r\n             }\r\n         );\r\n }\r\n\r\n \r\n/**\r\n * \r\n * @param url the endpoint where to send data\r\n * @param type the type of query GET, DELETE\r\n * @param successFunction Success function\r\n * @param errorFunction Error function\r\n */\r\n function requestWithoutBody(url:string, type:string, token:string, successFunction:Function, errorFunction:Function)\r\n {    \r\n     fetch(url, {\r\n         \"method\": type,\r\n         \"headers\": {\r\n             \"content-type\": \"application/json\",\r\n             \"accept\": \"application/json\",\r\n             \"Authorization\": `Bearer ${token}`\r\n         },\r\n         }).then(response => response.json())\r\n         .then(\r\n             (result) => {\r\n                successFunction(result)\r\n             },\r\n             (error) => {\r\n                errorFunction(error)\r\n             }\r\n    );\r\n }\r\n\r\n function getMessageTime(datetime:string) {\r\n    let time = datetime.split(\"T\")[1].split('+')[0]\r\n    let to = time.lastIndexOf(\":\")\r\n    return time.substring(0, to);\r\n}\r\n\r\n\r\nexport {validateEmail, validateNumber, validatePassword, getMediaType, getFileSize, requestWithBody, requestWithoutBody, getMessageTime, seconds2Time}"]},"metadata":{},"sourceType":"module"}