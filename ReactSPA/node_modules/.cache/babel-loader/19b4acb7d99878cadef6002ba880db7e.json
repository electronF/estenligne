{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\ReactSPA\\\\src\\\\components\\\\Pages\\\\ResetPasswordPage\\\\ResetPasswordForm\\\\ResetPasswordForm.tsx\";\nimport { Component } from \"react\";\nimport TextFormField from \"../../../shared/textformfield/TextFormField\";\nimport SubmitFormButton from '../../../shared/submitformbutton/SubmitFormButton';\nimport { validateEmail, validateNumber } from \"../../../shared/utils/functions\";\nimport \"./ResetPasswordForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ResetPasswordForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.props = this.props;\n    this.state = {\n      fieldType: \"login\",\n      login: \"\",\n      password: \"\",\n      loginAlertMessage: \"\",\n      passwordAlertMessage: \"\"\n    };\n\n    this.validateEmail = text => validateEmail(text);\n\n    this.validateNumber = text => validateNumber(text);\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      let isValid = validateEmail(this.state.login) || validateNumber(this.state.login);\n\n      if (isValid) {\n        let data = {\n          password: \"\",\n          email: null,\n          phone: null\n        };\n        if (this.state.login.includes(\"@\")) data.email = this.state.login;else data.phone = this.state.login;\n\n        try {\n          this.props.submitForm(data);\n        } catch (error) {}\n      }\n    };\n\n    this.handleChange = (fieldName, fieldValue) => {\n      if (fieldName === \"login\") {\n        if (fieldValue === \"\") this.setState({\n          fieldType: \"login\",\n          loginAlertMessage: \"\"\n        });else if (!isNaN(parseInt(fieldValue)) && parseInt(fieldValue).toString().length === fieldValue.length) {\n          if (this.validateNumber(fieldValue)) this.setState({\n            fieldType: \"phone\",\n            loginAlertMessage: \"success\"\n          });else this.setState({\n            fieldType: \"phone\",\n            loginAlertMessage: \"Invalid Phone number!\"\n          });\n        } else if (`${fieldValue}`.includes(\"@\")) {\n          if (this.validateEmail(fieldValue)) this.setState({\n            fieldType: \"email\",\n            loginAlertMessage: \"success\"\n          });else this.setState({\n            fieldType: \"email\",\n            loginAlertMessage: \"invalid email!\"\n          });\n        } else this.setState({\n          fieldType: \"login\",\n          loginAlertMessage: \"invalid field! Choose either email or phone to login\"\n        });\n      }\n    };\n\n    this.handleLeave = (fieldName, fieldValue) => {};\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"resetpassword-form\",\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextFormField, {\n        fieldName: \"login\",\n        fieldType: this.state.fieldType,\n        alertMessage: this.state.loginAlertMessage,\n        onChange: this.handleChange,\n        onBlur: this.handleLeave,\n        isRequired: true\n      }, \"resetpassword-form-field\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(SubmitFormButton, {\n        buttonName: \"RESET\"\n      }, \"resetpassword-form-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default ResetPasswordForm;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/Pages/ResetPasswordPage/ResetPasswordForm/ResetPasswordForm.tsx"],"names":["Component","TextFormField","SubmitFormButton","validateEmail","validateNumber","ResetPasswordForm","props","state","fieldType","login","password","loginAlertMessage","passwordAlertMessage","text","handleSubmit","event","preventDefault","isValid","data","email","phone","includes","submitForm","error","handleChange","fieldName","fieldValue","setState","isNaN","parseInt","toString","length","handleLeave","render"],"mappings":"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","sourcesContent":["import {FormEvent, Component} from \"react\"\r\nimport TextFormField from \"../../../shared/textformfield/TextFormField\"\r\nimport SubmitFormButton from '../../../shared/submitformbutton/SubmitFormButton';\r\n\r\nimport { validateEmail, validateNumber } from \"../../../shared/utils/functions\";\r\nimport { Credential as Credent} from \"../../../shared/utils/Types\";\r\n\r\nimport \"./ResetPasswordForm.css\"\r\n\r\nclass ResetPasswordForm extends Component{\r\n\r\n    props:any = this.props\r\n\r\n    state = {\r\n        fieldType: \"login\",\r\n        login:\"\",\r\n        password:\"\",\r\n        loginAlertMessage:\"\",\r\n        passwordAlertMessage: \"\"\r\n    }\r\n\r\n    validateEmail = (text:string) => validateEmail(text)\r\n    validateNumber = (text:string) => validateNumber(text)\r\n\r\n    handleSubmit = (event:FormEvent) => {\r\n        event.preventDefault()\r\n        let isValid = validateEmail(this.state.login) || validateNumber(this.state.login)\r\n        if(isValid)\r\n        {    \r\n            let data: Credent = {\r\n                password: \"\",\r\n                email: null,\r\n                phone: null\r\n            }\r\n            if(this.state.login.includes(\"@\"))\r\n                data.email = this.state.login\r\n            else\r\n                data.phone = this.state.login\r\n            try {\r\n                this.props.submitForm(data)\r\n            } catch (error) {}\r\n        }\r\n    }\r\n\r\n    handleChange = (fieldName:string, fieldValue:string) => {\r\n        if(fieldName === \"login\")\r\n        {\r\n            if(fieldValue === \"\")\r\n                this.setState({fieldType: \"login\", loginAlertMessage: \"\"})\r\n            else if(!isNaN(parseInt(fieldValue)) && parseInt(fieldValue).toString().length === fieldValue.length)\r\n            {\r\n                if(this.validateNumber(fieldValue))\r\n                    this.setState({fieldType: \"phone\", loginAlertMessage: \"success\"})\r\n                else\r\n                this.setState({fieldType: \"phone\", loginAlertMessage: \"Invalid Phone number!\"})\r\n            }\r\n            else if(`${fieldValue}`.includes(\"@\"))\r\n            {\r\n                if(this.validateEmail(fieldValue))\r\n                    this.setState({fieldType: \"email\", loginAlertMessage: \"success\"})\r\n                else\r\n                    this.setState({fieldType: \"email\", loginAlertMessage: \"invalid email!\"})\r\n            }\r\n            else\r\n                this.setState({fieldType: \"login\", loginAlertMessage: \"invalid field! Choose either email or phone to login\"})\r\n        }\r\n    }\r\n\r\n    handleLeave = (fieldName:string, fieldValue:string) =>\r\n    {\r\n\r\n    }\r\n    \r\n    render(){\r\n        return <form className=\"resetpassword-form\" onSubmit = {this.handleSubmit}>\r\n            <TextFormField fieldName = \"login\" fieldType = {this.state.fieldType} alertMessage = {this.state.loginAlertMessage} onChange = {this.handleChange} onBlur = {this.handleLeave} isRequired = {true} key = \"resetpassword-form-field\" />\r\n            <SubmitFormButton buttonName=\"RESET\" key = \"resetpassword-form-button\" />\r\n        </form> \r\n    }\r\n}\r\n\r\nexport default ResetPasswordForm"]},"metadata":{},"sourceType":"module"}