{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\ReactSPA\\\\src\\\\components\\\\shared\\\\filedisplayer\\\\FileDisplayer.tsx\";\nimport { Component } from 'react';\nimport { getFileSize, getMediaType } from '../utils/functions';\nimport \"./FileDisplayer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FileDisplayer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.props = this.props;\n    this.state = {\n      mediaIsPlaying: false,\n      mediaIsDownloaded: false\n    };\n  }\n\n  render() {\n    var {\n      name,\n      size\n    } = this.props;\n    var mediaTypeExt = getMediaType(name);\n    var [mediaType, ext] = mediaTypeExt.split(\"/\");\n    var file = {\n      \"video\": /*#__PURE__*/_jsxDEV(\"video\", {\n        src: name,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 21\n      }, this),\n      \"audio\": /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: name,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 21\n      }, this),\n      \"image\": /*#__PURE__*/_jsxDEV(\"img\", {\n        src: name,\n        alt: \"failed to load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 22\n      }, this),\n      \"application\": /*#__PURE__*/_jsxDEV(\"embed\", {\n        src: name,\n        type: mediaTypeExt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 27\n      }, this),\n      \"unknow\": /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unknow-file\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: `.${ext}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 52\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 76\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 23\n      }, this)\n    }; // frameBorder={0}\n\n    console.log(mediaTypeExt);\n    var media = file[mediaType];\n    media = media === undefined ? null : media;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-displayer\",\n      children: [media, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-description\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: ext.toLocaleUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: getFileSize(size)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default FileDisplayer;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/shared/filedisplayer/FileDisplayer.tsx"],"names":["Component","getFileSize","getMediaType","FileDisplayer","props","state","mediaIsPlaying","mediaIsDownloaded","render","name","size","mediaTypeExt","mediaType","ext","split","file","console","log","media","undefined","toLocaleUpperCase"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,oBAA1C;AAEA,OAAO,qBAAP;;;AAEA,MAAMC,aAAN,SAA4BH,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAClCI,KADkC,GACtB,KAAKA,KADiB;AAAA,SAElCC,KAFkC,GAE1B;AACJC,MAAAA,cAAc,EAAE,KADZ;AAEJC,MAAAA,iBAAiB,EAAE;AAFf,KAF0B;AAAA;;AAOlCC,EAAAA,MAAM,GAAG;AACL,QAAI;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAe,KAAKN,KAAxB;AACA,QAAIO,YAAY,GAAGT,YAAY,CAACO,IAAD,CAA/B;AACA,QAAI,CAACG,SAAD,EAAYC,GAAZ,IAAoBF,YAAY,CAACG,KAAb,CAAmB,GAAnB,CAAxB;AACA,QAAIC,IAAQ,GAAG;AACX,4BAAQ;AAAO,QAAA,GAAG,EAAEN,IAAZ;AAAkB,QAAA,QAAQ;AAA1B;AAAA;AAAA;AAAA;AAAA,cADG;AAEX,4BAAQ;AAAO,QAAA,GAAG,EAAEA,IAAZ;AAAkB,QAAA,QAAQ;AAA1B;AAAA;AAAA;AAAA;AAAA,cAFG;AAGX,4BAAS;AAAK,QAAA,GAAG,EAAGA,IAAX;AAAiB,QAAA,GAAG,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA,cAHE;AAIX,kCAAc;AAAO,QAAA,GAAG,EAAGA,IAAb;AAAmB,QAAA,IAAI,EAAGE;AAA1B;AAAA;AAAA;AAAA;AAAA,cAJH;AAKX,6BAAU;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCAA6B;AAAA,oBAAQ,IAAGE,GAAI;AAAf;AAAA;AAAA;AAAA;AAAA,gBAA7B,eAAqD;AAAA,oBAAOJ;AAAP;AAAA;AAAA;AAAA;AAAA,gBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AALC,KAAf,CAJK,CAUA;;AACLO,IAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ;AACA,QAAIO,KAAK,GAAGH,IAAI,CAACH,SAAD,CAAhB;AACAM,IAAAA,KAAK,GAAIA,KAAK,KAAKC,SAAX,GAAsB,IAAtB,GAA2BD,KAAnC;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,iBACKA,KADL,eAEI;AAAK,QAAA,SAAS,EAAG,kBAAjB;AAAA,gCACI;AAAA,oBAAQL,GAAG,CAACO,iBAAJ;AAAR;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAOnB,WAAW,CAACS,IAAD;AAAlB;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;;AA/BiC;;AAkCtC,eAAgBP,aAAhB","sourcesContent":["import { Component } from 'react'\r\nimport { getFileSize, getMediaType } from '../utils/functions'\r\n\r\nimport \"./FileDisplayer.css\"\r\n\r\nclass FileDisplayer extends Component {\r\n    props:any = this.props\r\n    state = {\r\n        mediaIsPlaying: false,\r\n        mediaIsDownloaded: false\r\n    }\r\n\r\n    render() {    \r\n        var {name, size} = this.props\r\n        var mediaTypeExt = getMediaType(name)\r\n        var [mediaType, ext]  = mediaTypeExt.split(\"/\")\r\n        var file:any = {\r\n            \"video\":<video src={name} controls></video>, \r\n            \"audio\":<audio src={name} controls></audio>,\r\n            \"image\": <img src= {name} alt=\"failed to load\" />, \r\n            \"application\":<embed src= {name} type= {mediaTypeExt}></embed>, \r\n            \"unknow\": <div className=\"unknow-file\"><span>{`.${ext}`}</span><span>{name}</span></div>\r\n        }    // frameBorder={0}\r\n        console.log(mediaTypeExt)\r\n        var media = file[mediaType]\r\n        media = (media === undefined)?null:media\r\n        return (\r\n            <div className=\"file-displayer\">\r\n                {media}\r\n                <div className = \"file-description\">\r\n                    <span >{ext.toLocaleUpperCase()}</span>\r\n                    <span>{getFileSize(size)}</span>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default  FileDisplayer"]},"metadata":{},"sourceType":"module"}