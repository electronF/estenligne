{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\ReactSPA\\\\src\\\\components\\\\Pages\\\\NewPasswordPage\\\\NewPasswordForm\\\\NewPasswordForm.tsx\";\nimport { Component } from \"react\";\nimport TextFormField from \"../../../shared/textformfield/TextFormField\";\nimport SubmitFormButton from '../../../shared/submitformbutton/SubmitFormButton';\nimport { validatePassword } from \"../../../shared/utils/functions\";\nimport \"./NewPasswordForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewPasswordForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      password: \"\",\n      rpassword: \"\",\n      passwordAlertMessage: \"\",\n      rpasswordAlertMessage: \"\"\n    };\n    this.props = this.props;\n\n    this.validatePassword = text => validatePassword(text);\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      let isValid = this.state.password === this.state.rpassword;\n      isValid = isValid && validatePassword(this.state.password) && validatePassword(this.state.password);\n\n      if (isValid) {\n        let data = {\n          password: this.state.password,\n          email: null,\n          phone: null\n        };\n\n        try {\n          this.props.submitForm(data);\n        } catch (error) {}\n      }\n    };\n\n    this.handleChange = (fieldName, fieldValue) => {\n      let fieldNames = new Set([\"login\", \"password\", \"rpassword\"]);\n      fieldName = fieldName.toLocaleLowerCase().trim();\n\n      if (fieldNames.has(fieldName)) {\n        if (fieldName === \"password\") {\n          if (validatePassword(fieldValue) || fieldValue.length === 0) {\n            if (validatePassword(fieldValue)) this.setState({\n              password: fieldValue,\n              passwordAlertMessage: \"success\"\n            });else this.setState({\n              password: fieldValue,\n              passwordAlertMessage: \"\"\n            });\n          } else this.setState({\n            passwordAlertMessage: \"Password must contains at least 6 characters\"\n          });\n        } else if (fieldName === \"rpassword\") {\n          if (this.state.password !== fieldValue) this.setState({\n            rpasswordAlertMessage: \"Your password must be same\"\n          });else {\n            if (fieldValue !== \"\") this.setState({\n              rpassword: fieldValue,\n              rpasswordAlertMessage: \"success\"\n            });else this.setState({\n              rpassword: fieldValue,\n              rpasswordAlertMessage: \"\"\n            });\n          }\n        }\n      }\n    };\n\n    this.handleLeave = (fieldName, fieldValue) => {};\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      className: \"newpassword-form\",\n      children: [/*#__PURE__*/_jsxDEV(TextFormField, {\n        fieldName: \"password\",\n        fieldType: \"password\",\n        alertMessage: this.state.passwordAlertMessage,\n        onChange: this.handleChange,\n        onBlur: this.handleLeave,\n        isRequired: true\n      }, \"newpassword-form-field1\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TextFormField, {\n        fieldName: \"rpassword\",\n        fieldType: \"password\",\n        alertMessage: this.state.rpasswordAlertMessage,\n        onChange: this.handleChange,\n        onBlur: this.handleLeave,\n        isRequired: true\n      }, \"newpassword-form-field2\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(SubmitFormButton, {\n        buttonName: \"SAGE\"\n      }, \"newpassword-form-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default NewPasswordForm;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/Pages/NewPasswordPage/NewPasswordForm/NewPasswordForm.tsx"],"names":["Component","TextFormField","SubmitFormButton","validatePassword","NewPasswordForm","state","password","rpassword","passwordAlertMessage","rpasswordAlertMessage","props","text","handleSubmit","event","preventDefault","isValid","data","email","phone","submitForm","error","handleChange","fieldName","fieldValue","fieldNames","Set","toLocaleLowerCase","trim","has","length","setState","handleLeave","render"],"mappings":"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","sourcesContent":["import {Component, FormEvent} from \"react\"\r\nimport TextFormField from \"../../../shared/textformfield/TextFormField\"\r\nimport SubmitFormButton from '../../../shared/submitformbutton/SubmitFormButton';\r\n\r\nimport { validatePassword } from \"../../../shared/utils/functions\";\r\nimport { Credential } from \"../../../shared/utils/types\";\r\n\r\nimport \"./NewPasswordForm.css\"\r\n\r\nclass NewPasswordForm extends Component{\r\n    state = {\r\n        password:\"\",\r\n        rpassword:\"\",\r\n        passwordAlertMessage: \"\",\r\n        rpasswordAlertMessage: \"\"\r\n    }\r\n\r\n    props:any = this.props\r\n\r\n    validatePassword = (text:string) => validatePassword(text)\r\n\r\n    handleSubmit = (event:FormEvent) => {\r\n        event.preventDefault()\r\n        \r\n        let isValid = this.state.password === this.state.rpassword\r\n        isValid = isValid && validatePassword(this.state.password) && validatePassword(this.state.password)\r\n        if(isValid)\r\n        {    \r\n            let data: Credential = {\r\n                password: this.state.password,\r\n                email: null,\r\n                phone: null\r\n            }\r\n            try {\r\n                this.props.submitForm(data)\r\n            } catch (error) {}\r\n        }\r\n    }\r\n\r\n    handleChange = (fieldName:string, fieldValue:string) => {\r\n        let fieldNames = new Set([\"login\", \"password\", \"rpassword\"])\r\n        fieldName = fieldName.toLocaleLowerCase().trim() \r\n        if(fieldNames.has(fieldName))\r\n        {\r\n            if (fieldName === \"password\")\r\n            {\r\n                if(validatePassword(fieldValue) || fieldValue.length === 0)\r\n                {\r\n                    if(validatePassword(fieldValue))\r\n                        this.setState({password:fieldValue, passwordAlertMessage: \"success\"})\r\n                    else\r\n                        this.setState({password:fieldValue, passwordAlertMessage: \"\"})\r\n                }\r\n                else \r\n                    this.setState({passwordAlertMessage: \"Password must contains at least 6 characters\"})\r\n            }\r\n            else if (fieldName === \"rpassword\")\r\n            {\r\n                if(this.state.password !== fieldValue)\r\n                    this.setState({rpasswordAlertMessage: \"Your password must be same\"})\r\n                else\r\n                {\r\n                    if(fieldValue !== \"\")\r\n                        this.setState({rpassword: fieldValue, rpasswordAlertMessage: \"success\"})\r\n                    else\r\n                        this.setState({rpassword: fieldValue, rpasswordAlertMessage: \"\"})\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    handleLeave = (fieldName:string, fieldValue:string) =>\r\n    {\r\n        \r\n    }\r\n\r\n    render(){\r\n        return <form onSubmit = {this.handleSubmit} className=\"newpassword-form\">\r\n            <TextFormField fieldName = \"password\" fieldType = \"password\" alertMessage = {this.state.passwordAlertMessage} onChange = {this.handleChange} onBlur = {this.handleLeave} isRequired = {true} key = \"newpassword-form-field1\"/>\r\n            <TextFormField fieldName = \"rpassword\" fieldType = \"password\" alertMessage = {this.state.rpasswordAlertMessage} onChange = {this.handleChange} onBlur = {this.handleLeave} isRequired = {true} key = \"newpassword-form-field2\" />\r\n            <SubmitFormButton buttonName=\"SAGE\" key = \"newpassword-form-button\" />\r\n        </form> \r\n    }\r\n}\r\n\r\nexport default NewPasswordForm"]},"metadata":{},"sourceType":"module"}