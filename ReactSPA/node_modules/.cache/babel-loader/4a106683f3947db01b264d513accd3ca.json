{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\ReactSPA\\\\src\\\\components\\\\Pages\\\\HomePage\\\\Body\\\\LeftSide\\\\NewMessage\\\\NewMessage.tsx\";\nimport { Component } from 'react';\nimport TextFormField from '../../../../../shared/textformfield/TextFormField';\nimport SubmitFormButton from '../../../../../shared/submitformbutton/SubmitFormButton';\nimport { validateEmail, validateNumber } from '../../../../../shared/utils/functions';\nimport \"./NewMessage.css\";\nimport FormMessage from '../../../../../shared/formmessage/FormMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewMessage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.props = this.props;\n    this.state = {\n      fieldType: \"login\",\n      login: \"\",\n      loginAlertMessage: \"\"\n    };\n\n    this.validateEmail = text => validateEmail(text);\n\n    this.validateNumber = text => validateNumber(text);\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      let isValid = validateEmail(this.state.login) || validateNumber(this.state.login);\n\n      if (isValid) {\n        let data = {\n          password: \"\",\n          email: null,\n          phone: null\n        };\n        if (this.state.login.includes(\"@\")) data.email = this.state.login;else data.phone = this.state.login;\n\n        try {\n          this.props.submitForm(data);\n        } catch (error) {\n          console.log(\"error\", error);\n        }\n      }\n    };\n\n    this.handleChange = (fieldName, fieldValue) => {\n      if (fieldName === \"login\") {\n        if (fieldValue === \"\") this.setState({\n          fieldType: \"login\",\n          loginAlertMessage: \"\"\n        });else if (!isNaN(parseInt(fieldValue))) {\n          if (this.validateNumber(fieldValue)) this.setState({\n            fieldType: \"phone\",\n            loginAlertMessage: \"success\",\n            \"phone\": fieldValue\n          });else this.setState({\n            fieldType: \"phone\",\n            loginAlertMessage: \"Invalid Phone number!\"\n          });\n        } else if (`${fieldValue}`.includes(\"@\")) {\n          if (this.validateEmail(fieldValue)) this.setState({\n            fieldType: \"email\",\n            loginAlertMessage: \"success\",\n            login: fieldValue\n          });else this.setState({\n            fieldType: \"email\",\n            loginAlertMessage: \"invalid email!\"\n          });\n        } else this.setState({\n          fieldType: \"login\",\n          loginAlertMessage: \"invalid field! Choose either email or phone to login\"\n        });\n      }\n    };\n\n    this.handleLeave = (fieldName, fieldValue) => {};\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"information\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"title\",\n          children: \"Enter destinator adress\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-error\",\n          children: this.props.alertMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormMessage, {\n          type: \"error\",\n          message: \"It may be email or phone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(TextFormField, {\n          fieldName: \"login\",\n          fieldType: this.state.fieldType,\n          placeHolder: \"Enter login or phone number\",\n          alertMessage: this.state.loginAlertMessage,\n          onChange: this.handleChange,\n          onBlur: this.handleLeave,\n          isRequired: true\n        }, \"newmessage-form-field\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SubmitFormButton, {\n          buttonName: \"Write\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default NewMessage;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/Pages/HomePage/Body/LeftSide/NewMessage/NewMessage.tsx"],"names":["Component","TextFormField","SubmitFormButton","validateEmail","validateNumber","FormMessage","NewMessage","props","state","fieldType","login","loginAlertMessage","text","handleSubmit","event","preventDefault","isValid","data","password","email","phone","includes","submitForm","error","console","log","handleChange","fieldName","fieldValue","setState","isNaN","parseInt","handleLeave","render","alertMessage"],"mappings":"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","sourcesContent":["import { Component, FormEvent } from 'react';\r\nimport TextFormField from '../../../../../shared/textformfield/TextFormField'\r\nimport SubmitFormButton from '../../../../../shared/submitformbutton/SubmitFormButton';\r\nimport { validateEmail, validateNumber } from '../../../../../shared/utils/functions';\r\nimport { Credential } from '../../../../../shared/utils/Types';\r\n\r\nimport \"./NewMessage.css\"\r\nimport FormMessage from '../../../../../shared/formmessage/FormMessage';\r\n\r\nclass NewMessage extends Component {\r\n    props:any = this.props\r\n\r\n    state = {\r\n        fieldType: \"login\",\r\n        login:\"\",\r\n        loginAlertMessage:\"\",\r\n    }\r\n\r\n    validateEmail = (text:string) => validateEmail(text)\r\n    validateNumber = (text:string) => validateNumber(text)\r\n\r\n    handleSubmit = (event:FormEvent) => {\r\n        event.preventDefault()\r\n        let isValid = validateEmail(this.state.login) || validateNumber(this.state.login)\r\n        if(isValid)\r\n        {    \r\n            let data: Credential = {\r\n                password: \"\",\r\n                email: null,\r\n                phone: null\r\n            }\r\n            if(this.state.login.includes(\"@\"))\r\n                data.email = this.state.login\r\n            else\r\n                data.phone = this.state.login\r\n            try {\r\n                this.props.submitForm(data)\r\n            } catch (error) {\r\n                console.log(\"error\", error)}\r\n        }\r\n    }\r\n\r\n    handleChange = (fieldName:string, fieldValue:string) => {\r\n        if(fieldName === \"login\")\r\n        {\r\n            if(fieldValue === \"\")\r\n                this.setState({fieldType: \"login\", loginAlertMessage: \"\"})\r\n            else if(!isNaN(parseInt(fieldValue)))\r\n            {\r\n                if(this.validateNumber(fieldValue))\r\n                    this.setState({fieldType: \"phone\", loginAlertMessage: \"success\", \"phone\": fieldValue})\r\n                else\r\n                    this.setState({fieldType: \"phone\", loginAlertMessage: \"Invalid Phone number!\"})\r\n            }\r\n            else if(`${fieldValue}`.includes(\"@\"))\r\n            {\r\n                if(this.validateEmail(fieldValue))\r\n                    this.setState({fieldType: \"email\", loginAlertMessage: \"success\", login: fieldValue})\r\n                else\r\n                    this.setState({fieldType: \"email\", loginAlertMessage: \"invalid email!\"})\r\n            }\r\n            else\r\n                this.setState({fieldType: \"login\", loginAlertMessage: \"invalid field! Choose either email or phone to login\"})\r\n        }\r\n    }\r\n\r\n    handleLeave = (fieldName:string, fieldValue:string) =>\r\n    {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className = \"new-message\"> \r\n                <div className='information'>\r\n                    <span className = \"title\">Enter destinator adress</span> \r\n                    <span className=\"text-error\">{this.props.alertMessage}</span> \r\n                    <FormMessage type=\"error\" message = \"It may be email or phone\" />\r\n                </div>\r\n                <form  onSubmit = {this.handleSubmit}>\r\n                    <TextFormField fieldName = \"login\" fieldType = {this.state.fieldType} placeHolder = \"Enter login or phone number\" alertMessage = {this.state.loginAlertMessage} onChange = {this.handleChange} onBlur = {this.handleLeave} isRequired = {true} key = \"newmessage-form-field\" />\r\n                    <SubmitFormButton buttonName = \"Write\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default  NewMessage"]},"metadata":{},"sourceType":"module"}