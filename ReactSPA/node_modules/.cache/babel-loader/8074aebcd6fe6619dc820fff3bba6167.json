{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\ReactSPA\\\\src\\\\components\\\\Pages\\\\LoginPage\\\\LoginForm\\\\LoginForm.tsx\";\nimport { Component } from 'react';\nimport TextFormField from \"../../../shared/textformfield/TextFormField\";\nimport SubmitFormButton from '../../../shared/submitformbutton/SubmitFormButton';\nimport { validateEmail, validateNumber } from \"../../../shared/utils/functions\";\nimport \"./LoginForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LoginForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fieldType: \"login\",\n      login: \"\",\n      password: \"\",\n      loginAlertMessage: \"\",\n      passwordAlertMessage: \"\"\n    };\n    this.props = this.props;\n\n    this.validateEmail = text => validateEmail(text);\n\n    this.validateNumber = text => validateNumber(text);\n\n    this.handleSubmit = event => {\n      event.preventDefault(); //Verif all the field\n\n      console.log(this.state.login, this.state.password);\n      let data = {\n        password: this.state.password,\n        email: null,\n        phone: null\n      };\n      if (this.state.login.includes(\"@\")) data.email = this.state.login;else data.phone = this.state.login;\n      this.props.submitForm(data);\n    };\n\n    this.handleChange = (fieldName, fieldValue) => {\n      let fieldNames = new Set([\"login\", \"password\"]);\n      fieldName = fieldName.toLocaleLowerCase().trim();\n\n      if (fieldNames.has(fieldName)) {\n        this.setState({\n          fieldName: fieldValue\n        });\n\n        if (fieldName === \"login\") {\n          if (fieldValue === \"\") this.setState({\n            fieldType: \"login\",\n            loginAlertMessage: \"\"\n          });else if (!isNaN(parseInt(fieldValue))) {\n            if (this.validateNumber(fieldValue)) this.setState({\n              fieldType: \"phone\",\n              loginAlertMessage: \"success\"\n            });else this.setState({\n              fieldType: \"phone\",\n              loginAlertMessage: \"Invalid Phone number!\"\n            });\n          } else if (`${fieldValue}`.includes(\"@\")) {\n            if (this.validateEmail(fieldValue)) this.setState({\n              fieldType: \"email\",\n              loginAlertMessage: \"success\"\n            });else this.setState({\n              fieldType: \"email\",\n              loginAlertMessage: \"invalid email!\"\n            });\n          } else this.setState({\n            fieldType: \"login\",\n            loginAlertMessage: \"invalid field! Choose either email or phone to login\"\n          });\n        } else if (fieldName === \"password\") {\n          if (fieldValue.length >= 6 || fieldValue.length === 0) {\n            if (fieldValue.length >= 6) this.setState({\n              passwordAlertMessage: \"success\"\n            });else this.setState({\n              passwordAlertMessage: \"\"\n            });\n          } else this.setState({\n            passwordAlertMessage: \"Password must contains at least 6 characters\"\n          });\n        }\n      }\n    };\n\n    this.handleLeave = (fieldName, fieldValue) => {};\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"login-form\",\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextFormField, {\n        fieldName: \"login\",\n        fieldType: this.state.fieldType,\n        alertMessage: this.state.loginAlertMessage,\n        onChange: this.handleChange,\n        onBlur: this.handleLeave,\n        required: true\n      }, \"login-form-field1\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TextFormField, {\n        fieldName: \"password\",\n        fieldType: \"password\",\n        alertMessage: this.state.passwordAlertMessage,\n        onChange: this.handleChange,\n        onBlur: this.handleLeave,\n        required: true\n      }, \"login-form-field2\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(SubmitFormButton, {\n        buttonName: \"LOGIN\"\n      }, \"login-form-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default LoginForm;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/Pages/LoginPage/LoginForm/LoginForm.tsx"],"names":["Component","TextFormField","SubmitFormButton","validateEmail","validateNumber","LoginForm","state","fieldType","login","password","loginAlertMessage","passwordAlertMessage","props","text","handleSubmit","event","preventDefault","console","log","data","email","phone","includes","submitForm","handleChange","fieldName","fieldValue","fieldNames","Set","toLocaleLowerCase","trim","has","setState","isNaN","parseInt","length","handleLeave","render"],"mappings":"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","sourcesContent":["import { Component, FormEvent } from 'react';\r\n\r\nimport TextFormField from \"../../../shared/textformfield/TextFormField\"\r\nimport SubmitFormButton from '../../../shared/submitformbutton/SubmitFormButton';\r\n\r\nimport { validateEmail, validateNumber } from \"../../../shared/utils/functions\";\r\n\r\nimport \"./LoginForm.css\"\r\nimport { Credential } from '../../../shared/utils/types';\r\n\r\nclass LoginForm extends Component{\r\n    \r\n    state = {\r\n        fieldType: \"login\",\r\n        login:\"\",\r\n        password:\"\",\r\n        loginAlertMessage:\"\",\r\n        passwordAlertMessage: \"\"\r\n    }\r\n\r\n    props:any = this.props\r\n\r\n    validateEmail = (text:string) => validateEmail(text)\r\n    validateNumber = (text:string) => validateNumber(text)\r\n\r\n    handleSubmit = (event:FormEvent) => {\r\n        event.preventDefault()\r\n        //Verif all the field\r\n        console.log(this.state.login, this.state.password)\r\n        let data: Credential = {\r\n            password: this.state.password,\r\n            email: null,\r\n            phone: null\r\n        }\r\n        if(this.state.login.includes(\"@\"))\r\n            data.email = this.state.login\r\n        else\r\n            data.phone = this.state.login\r\n        this.props.submitForm(data)\r\n    }\r\n\r\n    handleChange = (fieldName:string, fieldValue:string) => {\r\n        let fieldNames = new Set([\"login\", \"password\"])\r\n        fieldName = fieldName.toLocaleLowerCase().trim() \r\n        if(fieldNames.has(fieldName))\r\n        {\r\n            this.setState({fieldName : fieldValue})\r\n            if(fieldName === \"login\")\r\n            {\r\n                if(fieldValue === \"\")\r\n                    this.setState({fieldType: \"login\", loginAlertMessage: \"\"})\r\n                else if(!isNaN(parseInt(fieldValue)))\r\n                {\r\n                    if(this.validateNumber(fieldValue))\r\n                        this.setState({fieldType: \"phone\", loginAlertMessage: \"success\"})\r\n                    else\r\n                    this.setState({fieldType: \"phone\", loginAlertMessage: \"Invalid Phone number!\"})\r\n                }\r\n                else if(`${fieldValue}`.includes(\"@\"))\r\n                {\r\n                    if(this.validateEmail(fieldValue))\r\n                        this.setState({fieldType: \"email\", loginAlertMessage: \"success\"})\r\n                    else\r\n                        this.setState({fieldType: \"email\", loginAlertMessage: \"invalid email!\"})\r\n                }\r\n                else\r\n                    this.setState({fieldType: \"login\", loginAlertMessage: \"invalid field! Choose either email or phone to login\"})\r\n            }\r\n            else if(fieldName === \"password\")\r\n            {\r\n                if(fieldValue.length >= 6 || fieldValue.length === 0)\r\n                {\r\n                    if(fieldValue.length >= 6)\r\n                        this.setState({passwordAlertMessage: \"success\"})\r\n                    else\r\n                        this.setState({passwordAlertMessage: \"\"})\r\n                }\r\n                else \r\n                    this.setState({passwordAlertMessage: \"Password must contains at least 6 characters\"})\r\n            }\r\n        }\r\n    }\r\n\r\n    handleLeave = (fieldName:string, fieldValue:string) =>\r\n    {\r\n\r\n    }\r\n\r\n    render(){\r\n        return <form className=\"login-form\" onSubmit = {this.handleSubmit}>\r\n            <TextFormField fieldName = \"login\" fieldType = {this.state.fieldType} alertMessage = {this.state.loginAlertMessage} onChange = {this.handleChange} onBlur = {this.handleLeave} key = \"login-form-field1\" required />\r\n            <TextFormField fieldName = \"password\" fieldType = \"password\" alertMessage = {this.state.passwordAlertMessage} onChange = {this.handleChange} onBlur = {this.handleLeave} key = \"login-form-field2\" required />\r\n            <SubmitFormButton buttonName=\"LOGIN\" key = \"login-form-button\" />\r\n        </form> \r\n    }\r\n}\r\n\r\nexport default LoginForm"]},"metadata":{},"sourceType":"module"}