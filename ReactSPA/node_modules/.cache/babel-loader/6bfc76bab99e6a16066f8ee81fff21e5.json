{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\ReactSPA\\\\src\\\\components\\\\Pages\\\\HomePage\\\\Body\\\\LeftSide\\\\LeftSide.tsx\";\nimport { Component } from \"react\";\nimport ActionBar from \"./ActionBar/ActionBar\";\nimport ListConversation from './ListConversation/ListConversation';\nimport add from \"./../../../../../wwwroot/images/plus_white.png\";\nimport NewMessage from './NewMessage/NewMessage';\nimport NewGroup from './NewGroup/NewGroup';\nimport NewPrivateChat from './NewPrivateChat/NewPrivateChat';\nimport Cookies from \"universal-cookie/es6\";\nimport { requestWithBody, requestWithoutBody } from \"../../../../shared/utils/functions\";\nimport settings from \"./../../../../../settings.json\";\nimport './LeftSide.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass LeftSide extends Component {\n  constructor(...args) {\n    super(...args);\n    this.cookies = new Cookies();\n    this.settings = settings;\n    this.props = this.props;\n    this._users = [];\n    this._conversations = [];\n    this.state = {\n      conversations: this._conversations,\n      typeConversationIsOpen: false,\n      moreConversationIsDisplayed: false,\n      newSenderIsChoose: false,\n      alertUserFound: \"\",\n      currentDisplayedPage: \"conversation\"\n    };\n\n    this.openTypeConversatons = event => {\n      event.currentTarget.style.setProperty(\"transition\", \"all linear .05s\");\n      if (this.state.typeConversationIsOpen === false) event.currentTarget.style.setProperty(\"rotate\", \"45deg\");else event.currentTarget.style.setProperty(\"rotate\", \"0deg\");\n      this.setState({\n        typeConversationIsOpen: !this.state.typeConversationIsOpen,\n        moreConversationIsDisplayed: !this.state.typeConversationIsOpen,\n        currentDisplayedPage: \"conversation\"\n      });\n    };\n\n    this.createPrivateChatRoom = (email, phoneNumber, userProfileId = -1) => {\n      console.log(email, phoneNumber, userProfileId);\n      var toSend = \"\";\n      if (email !== null && email.trim().toLowerCase().length > 0) toSend = `emailAddress=${email}`;else if (phoneNumber !== null && phoneNumber.trim().length > 0 && email === null) toSend = `phoneNumber=${phoneNumber}`;\n\n      if (toSend !== \"\") {\n        if (userProfileId !== \"\" && userProfileId > -1) toSend = `${toSend}&userProfileId=${userProfileId}`;\n        requestWithoutBody(`${settings.host}/api/ChatRoom/CreatePrivate?${toSend}`, \"POST\", this.props.authToken, this.sucessFunctionCreateChatRoom, this.errorCreateChatRoomFunction);\n      } else console.log('error');\n    };\n\n    this.createNewGroup = groupeName => {\n      var toSend = \"\";\n      if (groupeName !== null && groupeName.trim().toLowerCase().length > 0) toSend = `emailAdress=${groupeName}`;\n\n      if (toSend !== \"\") {\n        var data = {\n          \"groupName\": groupeName,\n          \"joinToken\": \"\",\n          \"about\": \"Groupe description\"\n        };\n        requestWithBody(`${settings.host}/api/ChatRoom/CreatePrivate?${toSend}`, \"POST\", data, this.cookies.get(\"token\"), this.successCreateNewGroup, this.errorCreateNewGroup);\n      } else console.log('error');\n    };\n\n    this.sucessFunctionCreateChatRoom = result => {\n      var keys = Object.keys(result);\n      console.log(result);\n\n      if (keys.includes('chatRoomId')) {\n        var _elements$item;\n\n        var identity = result.chatRoomId;\n        var name = result.userProfile.username;\n        var id = result.id;\n        var userId = result.id;\n        requestWithoutBody(`${settings.host}/api/ChatRoom/GetInfo?userChatRoomId=${result.id}`, \"GET\", this.props.authToken, res => {\n          name = res.name;\n          id = res.userChatRoomId;\n          identity = res.id;\n        }, error => {});\n        let elements = document.getElementsByClassName(\"new-conversation\");\n        if (elements.length >= 0) (_elements$item = elements.item(0)) === null || _elements$item === void 0 ? void 0 : _elements$item.setAttribute(\"style\", \"rotate:0deg;\"); //?.style.setProperty(\"rotate\", \"0deg\")\n\n        this.setState({\n          typeConversationIsOpen: !this.state.typeConversationIsOpen,\n          moreConversationIsDisplayed: !this.state.typeConversationIsOpen,\n          currentDisplayedPage: \"conversation\"\n        });\n        this.props.openConversation(identity, id, userId, name, \"person\");\n      } else {\n        // let isEmail = data.email !== undefined && data.email !== \"\" \n        // this.setState({alertUserFound: `No user found with this ${(isEmail)?\"email\":\"phone number\"}`})\n        this.setState({\n          alertUserFound: `Error! something happen wrong ${result.title}`\n        });\n      }\n    };\n\n    this.errorCreateChatRoomFunction = error => {\n      this.setState({\n        alertUserFound: `Error! ${error}`\n      });\n    };\n\n    this.successCreatePrivateConversation = result => {};\n\n    this.errorCreatePrivateConversation = error => {};\n\n    this.successCreateNewGroup = result => {};\n\n    this.errorCreateNewGroup = error => {};\n\n    this.successGetConversations = result => {\n      try {\n        this.formatAndAddConversations(result);\n      } catch (error) {}\n    };\n\n    this.errorGetConversations = error => {};\n\n    this.newMessage = event => {\n      this.setState({\n        moreConversationIsDisplayed: false,\n        currentDisplayedPage: \"newMessagePage\"\n      });\n    };\n\n    this.newGroup = event => {\n      this.setState({\n        moreConversationIsDisplayed: false,\n        currentDisplayedPage: \"newGroupPage\"\n      });\n    };\n\n    this.newChatRoom = event => {\n      this.setState({\n        moreConversationIsDisplayed: false,\n        currentDisplayedPage: \"newPrivateChatRoom\"\n      });\n    };\n\n    this.submitForm = (email = null, phoneNumber, groupName = null) => {\n      console.log(email, phoneNumber);\n      if (this.state.currentDisplayedPage !== \"newGroupPage\") this.createPrivateChatRoom(`${email}`.toLocaleLowerCase().trim(), `${phoneNumber}`.toLocaleLowerCase().trim(), this.props.userProfileId);else this.createNewGroup(groupName);\n    };\n\n    this.handleChange = () => {\n      this.setState({\n        alertUserFound: \"\"\n      });\n    };\n\n    this.componentDidMount = () => {\n      // console.log(\"userprofileid\", this.props.userProfileId, this.cookies.get(\"userProfileId\"));\n      requestWithoutBody(`${settings.host}/api/chatroom/getall?userProfileId=${this.cookies.get(\"userProfileId\")}`, \"GET\", this.props.authToken, this.successGetConversations, this.errorGetConversations);\n    };\n  }\n\n  formatAndAddConversations(data) {\n    var conversations = [...this.state.conversations];\n\n    for (var conv of data) {\n      var conversation = {\n        image: conv.photoFileName,\n        category: \"person\",\n        name: conv.name,\n        datetime: conv.dateSent,\n        unreads: conv.latestMessage.notReadCount,\n        message: conv.shortBody,\n        state: conv.latestMessage.notReadCount > 0 ? \"unread\" : conv.latestMessage.notReceivedCount > 0 ? \"send\" : \"received\",\n        identity: conv.id,\n        id: conv.userChatRoomId\n      };\n      conversations.push(conversation);\n    }\n\n    this.setState({\n      conversations\n    });\n  }\n\n  render() {\n    let newPage = {\n      \"newMessagePage\": /*#__PURE__*/_jsxDEV(NewMessage, {\n        handleChange: this.handleChange,\n        alertMessage: this.state.alertUserFound,\n        submitForm: this.submitForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 41\n      }, this),\n      \"newGroupPage\": /*#__PURE__*/_jsxDEV(NewGroup, {\n        submitForm: this.submitForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 181\n      }, this),\n      \"newPrivateChatRoom\": /*#__PURE__*/_jsxDEV(NewPrivateChat, {\n        submitForm: this.submitForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 246\n      }, this)\n    }[this.state.currentDisplayedPage];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-side\",\n      children: [newPage !== null && newPage !== undefined ? newPage : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(ActionBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conversation-list\",\n          children: /*#__PURE__*/_jsxDEV(ListConversation, {\n            conversations: this.state.conversations,\n            openConversation: this.props.openConversation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"more-conversations\",\n        children: [this.state.moreConversationIsDisplayed ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"type-conversations\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: this.newMessage,\n            children: \" New message \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: this.newGroup,\n            children: \" New groupe \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 64\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-conversation\",\n          onClick: this.openTypeConversatons,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: add,\n            alt: \"new\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default LeftSide;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/Pages/HomePage/Body/LeftSide/LeftSide.tsx"],"names":["Component","ActionBar","ListConversation","add","NewMessage","NewGroup","NewPrivateChat","Cookies","requestWithBody","requestWithoutBody","settings","LeftSide","cookies","props","_users","_conversations","state","conversations","typeConversationIsOpen","moreConversationIsDisplayed","newSenderIsChoose","alertUserFound","currentDisplayedPage","openTypeConversatons","event","currentTarget","style","setProperty","setState","createPrivateChatRoom","email","phoneNumber","userProfileId","console","log","toSend","trim","toLowerCase","length","host","authToken","sucessFunctionCreateChatRoom","errorCreateChatRoomFunction","createNewGroup","groupeName","data","get","successCreateNewGroup","errorCreateNewGroup","result","keys","Object","includes","identity","chatRoomId","name","userProfile","username","id","userId","res","userChatRoomId","error","elements","document","getElementsByClassName","item","setAttribute","openConversation","title","successCreatePrivateConversation","errorCreatePrivateConversation","successGetConversations","formatAndAddConversations","errorGetConversations","newMessage","newGroup","newChatRoom","submitForm","groupName","toLocaleLowerCase","handleChange","componentDidMount","conv","conversation","image","photoFileName","category","datetime","dateSent","unreads","latestMessage","notReadCount","message","shortBody","notReceivedCount","push","render","newPage","undefined"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\r\nimport ActionBar from \"./ActionBar/ActionBar\";\r\nimport ListConversation from './ListConversation/ListConversation';\r\nimport { UserProfile, ConversationDTO } from \"../../../../shared/utils/Types\";\r\nimport add from \"./../../../../../wwwroot/images/plus_white.png\"\r\nimport NewMessage from './NewMessage/NewMessage';\r\nimport NewGroup from './NewGroup/NewGroup';\r\nimport NewPrivateChat from './NewPrivateChat/NewPrivateChat';\r\nimport Cookies from \"universal-cookie/es6\";\r\nimport { requestWithBody, requestWithoutBody } from \"../../../../shared/utils/functions\";\r\nimport settings from \"./../../../../../settings.json\";\r\n\r\nimport './LeftSide.css'\r\n\r\n\r\nclass LeftSide extends Component{\r\n\r\n\r\n    cookies =  new Cookies()\r\n    settings = settings\r\n    props:any = this.props\r\n    _users: UserProfile[] = []\r\n    _conversations:ConversationDTO[] = []\r\n    state = {\r\n        conversations: this._conversations ,\r\n        typeConversationIsOpen : false,\r\n        moreConversationIsDisplayed: false,\r\n        newSenderIsChoose: false,\r\n        alertUserFound: \"\",\r\n        currentDisplayedPage: \"conversation\" \r\n    }\r\n\r\n    formatAndAddConversations(data:Array<any>)\r\n    {\r\n        var conversations = [...this.state.conversations]\r\n        for(var conv of data){\r\n            var conversation:ConversationDTO = {\r\n                image: conv.photoFileName,\r\n                category: \"person\",\r\n                name: conv.name,\r\n                datetime: conv.dateSent,\r\n                unreads: conv.latestMessage.notReadCount,\r\n                message: conv.shortBody,\r\n                state: ((conv.latestMessage.notReadCount>0)?(\"unread\"):(conv.latestMessage.notReceivedCount > 0)?(\"send\"):(\"received\")),\r\n                identity: conv.id,\r\n                id: conv.userChatRoomId\r\n            }\r\n            conversations.push(conversation)\r\n        }\r\n        this.setState({conversations})\r\n    }\r\n\r\n    openTypeConversatons = (event:any) => {\r\n        event.currentTarget.style.setProperty(\"transition\", \"all linear .05s\")\r\n        if(this.state.typeConversationIsOpen === false)\r\n            event.currentTarget.style.setProperty(\"rotate\", \"45deg\")\r\n        else\r\n            event.currentTarget.style.setProperty(\"rotate\", \"0deg\")\r\n        this.setState({\r\n                        typeConversationIsOpen: !this.state.typeConversationIsOpen,\r\n                        moreConversationIsDisplayed: !this.state.typeConversationIsOpen,\r\n                        currentDisplayedPage: \"conversation\"})\r\n    }\r\n\r\n    createPrivateChatRoom = (email:string|null, phoneNumber:string|null, userProfileId:string|number = -1) =>\r\n    {\r\n        console.log(email, phoneNumber, userProfileId)\r\n        var toSend = \"\"\r\n        if(email !== null && email.trim().toLowerCase().length > 0)\r\n            toSend = `emailAddress=${email}`\r\n        else if(phoneNumber !== null && phoneNumber.trim().length > 0 && email === null)\r\n            toSend = `phoneNumber=${phoneNumber}`\r\n        if(toSend !== \"\")\r\n        {\r\n            if(userProfileId !== \"\" && userProfileId > -1)\r\n            toSend = `${toSend}&userProfileId=${userProfileId}`\r\n            requestWithoutBody(`${settings.host}/api/ChatRoom/CreatePrivate?${toSend}`, \"POST\", this.props.authToken, this.sucessFunctionCreateChatRoom, this.errorCreateChatRoomFunction)\r\n        }\r\n        else\r\n            console.log('error')\r\n    }\r\n\r\n    createNewGroup = (groupeName:string|null) =>\r\n    {\r\n        var toSend = \"\"\r\n        if(groupeName !== null && groupeName.trim().toLowerCase().length > 0)\r\n            toSend = `emailAdress=${groupeName}`\r\n        \r\n        if(toSend !== \"\")\r\n        {\r\n            var data = {\r\n                \"groupName\": groupeName,\r\n                \"joinToken\": \"\",\r\n                \"about\": \"Groupe description\",\r\n              }\r\n            requestWithBody(`${settings.host}/api/ChatRoom/CreatePrivate?${toSend}`, \"POST\", data, this.cookies.get(\"token\"), this.successCreateNewGroup, this.errorCreateNewGroup)\r\n        }\r\n        else\r\n            console.log('error')\r\n    }\r\n\r\n    sucessFunctionCreateChatRoom = (result:any) => {\r\n        var keys = Object.keys(result)\r\n        console.log(result)\r\n        if(keys.includes('chatRoomId'))\r\n        {\r\n            var identity = result.chatRoomId\r\n            var name = result.userProfile.username\r\n            var id = result.id\r\n            var userId = result.id\r\n            requestWithoutBody(`${settings.host}/api/ChatRoom/GetInfo?userChatRoomId=${result.id}`, \"GET\", this.props.authToken, (res:any)=>{\r\n                name = res.name\r\n                id = res.userChatRoomId\r\n                identity = res.id\r\n            }, (error:any)=>{})\r\n            \r\n            let elements = document.getElementsByClassName(\"new-conversation\")\r\n            if(elements.length >= 0)\r\n                elements.item(0)?.setAttribute(\"style\", \"rotate:0deg;\")//?.style.setProperty(\"rotate\", \"0deg\")\r\n            this.setState({\r\n                typeConversationIsOpen: !this.state.typeConversationIsOpen,\r\n                moreConversationIsDisplayed: !this.state.typeConversationIsOpen,\r\n                currentDisplayedPage: \"conversation\"})\r\n            this.props.openConversation(identity, id, userId, name, \"person\")\r\n        }\r\n        else \r\n        {\r\n            // let isEmail = data.email !== undefined && data.email !== \"\" \r\n            // this.setState({alertUserFound: `No user found with this ${(isEmail)?\"email\":\"phone number\"}`})\r\n            this.setState({alertUserFound: `Error! something happen wrong ${result.title}`  })\r\n        }\r\n    } \r\n\r\n    errorCreateChatRoomFunction = (error:any) => {\r\n        this.setState({alertUserFound: `Error! ${error}`})\r\n    }\r\n\r\n    successCreatePrivateConversation = (result:any) =>\r\n    {\r\n\r\n    }\r\n\r\n    errorCreatePrivateConversation = (error:any) =>\r\n    {\r\n        \r\n    }\r\n\r\n    successCreateNewGroup = (result:any) =>\r\n    {\r\n\r\n    }\r\n\r\n    errorCreateNewGroup = (error:any) =>\r\n    {\r\n        \r\n    }\r\n\r\n    successGetConversations = (result:any) =>\r\n    {\r\n        try {\r\n            this.formatAndAddConversations(result)   \r\n        } catch (error) {}\r\n    }\r\n\r\n    errorGetConversations = (error:any) =>\r\n    {\r\n        \r\n    }\r\n\r\n    newMessage = (event:any) => {\r\n        this.setState({\r\n            moreConversationIsDisplayed: false, currentDisplayedPage: \"newMessagePage\"})\r\n    }\r\n\r\n    newGroup = (event:any) => {\r\n        this.setState({\r\n            moreConversationIsDisplayed: false, currentDisplayedPage: \"newGroupPage\"})\r\n    }\r\n\r\n    newChatRoom = (event:any) => {\r\n        this.setState({\r\n            moreConversationIsDisplayed: false, currentDisplayedPage: \"newPrivateChatRoom\"})\r\n    }\r\n\r\n    submitForm = (email:string|null = null, phoneNumber:string|null, groupName:string|null=null) => {\r\n        console.log(email, phoneNumber)\r\n        if (this.state.currentDisplayedPage !== \"newGroupPage\")\r\n            this.createPrivateChatRoom(`${email}`.toLocaleLowerCase().trim(), \r\n                                                        `${phoneNumber}`.toLocaleLowerCase().trim(), this.props.userProfileId)    \r\n        else\r\n            this.createNewGroup(groupName)\r\n    }\r\n\r\n    handleChange = () => {\r\n        this.setState({alertUserFound: \"\"})\r\n    }\r\n\r\n    componentDidMount = () =>{\r\n        // console.log(\"userprofileid\", this.props.userProfileId, this.cookies.get(\"userProfileId\"));\r\n        requestWithoutBody(`${settings.host}/api/chatroom/getall?userProfileId=${this.cookies.get(\"userProfileId\")}`, \"GET\", this.props.authToken, this.successGetConversations, this.errorGetConversations)\r\n    }\r\n\r\n    render(){\r\n        let newPage = {\"newMessagePage\":<NewMessage handleChange = {this.handleChange} alertMessage = {this.state.alertUserFound} submitForm = {this.submitForm}/>,  \"newGroupPage\":<NewGroup submitForm = {this.submitForm}/>, \"newPrivateChatRoom\":<NewPrivateChat submitForm = {this.submitForm}/>}[this.state.currentDisplayedPage]           \r\n        return(\r\n            <div className=\"left-side\">\r\n                {(newPage !== null && newPage !== undefined)?(newPage):(\r\n                    <>\r\n                        <div >\r\n                            <ActionBar  />\r\n                        </div>\r\n                        <div className = \"conversation-list\">\r\n                            <ListConversation conversations = {this.state.conversations} openConversation={this.props.openConversation}/>\r\n                        </div>\r\n                    </>)\r\n                }\r\n                <div className = \"more-conversations\">\r\n                    {(this.state.moreConversationIsDisplayed)?(<div className = \"type-conversations\">\r\n                        <span onClick = {this.newMessage}> New message </span>\r\n                        <span onClick = {this.newGroup}> New groupe </span>\r\n                        {/* <span onClick = {this.newChatRoom}> Private tchat room</span> */}\r\n                    </div>):null}\r\n                    <div className = \"new-conversation\" onClick = {this.openTypeConversatons}>\r\n                        <img src={add} alt=\"new\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LeftSide\r\n"]},"metadata":{},"sourceType":"module"}