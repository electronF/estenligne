{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\ReactSPA\\\\src\\\\components\\\\Pages\\\\RegisterPage\\\\RegisterForm\\\\RegisterForm.tsx\";\nimport { Component } from 'react';\nimport TextFormField from \"../../../shared/textformfield/TextFormField\";\nimport SubmitFormButton from \"../../../shared/submitformbutton/SubmitFormButton\";\nimport { validateNumber, validateEmail, validatePassword } from '../../../shared/utils/functions';\nimport \"./RegisterForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RegisterForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fieldType: \"login\",\n      login: \"\",\n      password: \"\",\n      rpassword: \"\",\n      loginAlertMessage: \"\",\n      pseudoAlertMessage: \"\",\n      passwordAlertMessage: \"\",\n      rpasswordAlertMessage: \"\"\n    };\n    this.props = this.props;\n\n    this.validateEmail = text => validateEmail(text);\n\n    this.validateNumber = text => validateNumber(text);\n\n    this.validatePassword = text => validatePassword(text);\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      let isValid = this.state.password === this.state.rpassword;\n      isValid = isValid && (validateEmail(this.state.login) || validateNumber(this.state.login));\n      isValid = isValid && validatePassword(this.state.password);\n\n      if (isValid) {\n        let data = {\n          password: this.state.password,\n          email: null,\n          phoneNumber: null\n        };\n        if (this.state.login.includes(\"@\")) data.email = this.state.login;else data.phoneNumber = this.state.login;\n\n        try {\n          this.props.submitForm(data);\n        } catch (error) {}\n      }\n    };\n\n    this.handleChange = (fieldName, fieldValue) => {\n      let fieldNames = new Set([\"login\", \"pseudo\", \"password\", \"rpassword\"]);\n      fieldName = fieldName.toLocaleLowerCase().trim();\n\n      if (fieldNames.has(fieldName)) {\n        if (fieldName === \"login\") {\n          var isNumber = parseInt(fieldValue).toString().length === fieldValue.length;\n          isNumber = isNumber || parseInt(fieldValue).toString().length === fieldValue.length - 1 && fieldValue.startsWith(\"+\");\n          if (fieldValue === \"\") this.setState({\n            fieldType: \"login\",\n            loginAlertMessage: \"\"\n          });else if (!isNaN(parseInt(fieldValue)) && isNumber) {\n            if (this.validateNumber(fieldValue)) {\n              this.setState({\n                'login': fieldValue\n              });\n              this.setState({\n                fieldType: \"phone\",\n                loginAlertMessage: \"success\"\n              });\n            } else this.setState({\n              fieldType: \"phone\",\n              loginAlertMessage: \"Invalid Phone number!\"\n            });\n          } else if (`${fieldValue}`.includes(\"@\")) {\n            if (this.validateEmail(fieldValue)) {\n              this.setState({\n                \"login\": fieldValue\n              });\n              this.setState({\n                fieldType: \"email\",\n                loginAlertMessage: \"success\"\n              });\n            } else this.setState({\n              fieldType: \"email\",\n              loginAlertMessage: \"invalid email!\"\n            });\n          } else this.setState({\n            fieldType: \"login\",\n            loginAlertMessage: \"Invalid field! Choose either email or phone to login\"\n          });\n        } else if (fieldName === \"password\") {\n          if (validatePassword(fieldValue) || fieldValue.length === 0) {\n            if (validatePassword(fieldValue)) this.setState({\n              password: fieldValue,\n              passwordAlertMessage: \"success\"\n            });else this.setState({\n              password: fieldValue,\n              passwordAlertMessage: \"\"\n            });\n          } else this.setState({\n            passwordAlertMessage: \"Password must contains at least 6 characters\"\n          });\n        } else if (fieldName === \"rpassword\") {\n          if (this.state.password !== fieldValue) this.setState({\n            rpasswordAlertMessage: \"Your password must be same\"\n          });else {\n            if (fieldValue !== \"\") this.setState({\n              rpassword: fieldValue,\n              rpasswordAlertMessage: \"success\"\n            });else this.setState({\n              rpassword: fieldValue,\n              rpasswordAlertMessage: \"\"\n            });\n          }\n        } else if (fieldName === \"pseudo\") {\n          var pseudo = /^((?=.*[A-Za-z])[A-Za-z\\d\\W]){3,}$/;\n          if (!pseudo.test(fieldValue.trim())) this.setState({\n            pseudoAlertMessage: \"Your username must have at least three letters\"\n          });else {\n            if (fieldValue !== \"\") this.setState({\n              pseudo: fieldValue.trim(),\n              pseudoAlertMessage: \"success\"\n            });else this.setState({\n              pseudo: fieldValue.trim(),\n              pseudoAlertMessage: \"\"\n            });\n          }\n        }\n      }\n    };\n\n    this.handleLeave = (fieldName, fieldValue) => {};\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"register-form\",\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextFormField, {\n        fieldType: this.state.fieldType,\n        fieldName: \"login\",\n        isRequired: true,\n        placeHolder: \"Enter email or phone number\",\n        alertMessage: this.state.loginAlertMessage,\n        onChange: this.handleChange,\n        onBlur: this.handleLeave,\n        required: true\n      }, \"register-form-field1\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextFormField, {\n        fieldType: \"password\",\n        fieldName: \"password\",\n        isRequired: true,\n        placeHolder: \"Enter your password\",\n        alertMessage: this.state.passwordAlertMessage,\n        onChange: this.handleChange,\n        onBlur: this.handleLeave,\n        required: true\n      }, \"register-form-field3\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextFormField, {\n        fieldType: \"password\",\n        fieldName: \"rpassword\",\n        isRequired: true,\n        placeHolder: \"Enter your password again\",\n        alertMessage: this.state.rpasswordAlertMessage,\n        onChange: this.handleChange,\n        onBlur: this.handleLeave,\n        required: true\n      }, \"register-form-field4\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"list-group-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-check-input me-1\",\n          type: \"checkbox\",\n          value: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), \"Remember me\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SubmitFormButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RegisterForm;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/Pages/RegisterPage/RegisterForm/RegisterForm.tsx"],"names":["Component","TextFormField","SubmitFormButton","validateNumber","validateEmail","validatePassword","RegisterForm","state","fieldType","login","password","rpassword","loginAlertMessage","pseudoAlertMessage","passwordAlertMessage","rpasswordAlertMessage","props","text","handleSubmit","event","preventDefault","isValid","data","email","phoneNumber","includes","submitForm","error","handleChange","fieldName","fieldValue","fieldNames","Set","toLocaleLowerCase","trim","has","isNumber","parseInt","toString","length","startsWith","setState","isNaN","pseudo","test","handleLeave","render"],"mappings":"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","sourcesContent":["import { Component, FormEvent } from 'react';\r\nimport TextFormField from \"../../../shared/textformfield/TextFormField\";\r\nimport SubmitFormButton from \"../../../shared/submitformbutton/SubmitFormButton\";\r\n\r\nimport { validateNumber, validateEmail, validatePassword } from '../../../shared/utils/functions';\r\n\r\nimport \"./RegisterForm.css\"\r\nimport { Credential } from '../../../shared/utils/Types';\r\n\r\nclass RegisterForm extends Component\r\n{    \r\n    state = {\r\n        fieldType: \"login\",\r\n        login:\"\",\r\n        password:\"\",\r\n        rpassword:\"\",\r\n        loginAlertMessage:\"\",\r\n        pseudoAlertMessage:\"\",\r\n        passwordAlertMessage: \"\",\r\n        rpasswordAlertMessage: \"\"\r\n    }\r\n\r\n    props:any = this.props\r\n\r\n    validateEmail = (text:string) => validateEmail(text)\r\n    validateNumber = (text:string) => validateNumber(text)\r\n    validatePassword = (text:string) => validatePassword(text)\r\n\r\n    handleSubmit = (event:FormEvent) => {\r\n        event.preventDefault()\r\n        \r\n        let isValid = this.state.password === this.state.rpassword\r\n        isValid = isValid && (validateEmail(this.state.login) || validateNumber(this.state.login))\r\n        isValid = isValid && validatePassword(this.state.password)\r\n        if(isValid)\r\n        {    \r\n            let data: Credential = {\r\n                password: this.state.password,\r\n                email: null,\r\n                phoneNumber: null\r\n            }\r\n            if(this.state.login.includes(\"@\"))\r\n                data.email = this.state.login\r\n            else\r\n                data.phoneNumber = this.state.login\r\n            \r\n            try {\r\n                this.props.submitForm(data)\r\n            } catch (error) {}\r\n        }\r\n    }\r\n\r\n    handleChange = (fieldName:string, fieldValue:string) => {\r\n        let fieldNames = new Set([\"login\", \"pseudo\", \"password\", \"rpassword\"])\r\n        fieldName = fieldName.toLocaleLowerCase().trim() \r\n        if(fieldNames.has(fieldName))\r\n        {\r\n            if(fieldName === \"login\")\r\n            {\r\n                var isNumber = parseInt(fieldValue).toString().length === fieldValue.length\r\n                isNumber = isNumber || ((parseInt(fieldValue).toString().length === fieldValue.length - 1) && fieldValue.startsWith(\"+\"))\r\n                if(fieldValue === \"\")\r\n                    this.setState({fieldType: \"login\", loginAlertMessage: \"\"})\r\n                    \r\n                else if(!isNaN(parseInt(fieldValue)) && isNumber)\r\n                {\r\n                    if(this.validateNumber(fieldValue))\r\n                    {\r\n                        this.setState({'login' : fieldValue})\r\n                        this.setState({fieldType: \"phone\", loginAlertMessage: \"success\"})\r\n                    }\r\n                    else\r\n                        this.setState({fieldType: \"phone\", loginAlertMessage: \"Invalid Phone number!\"})\r\n                }\r\n                else if(`${fieldValue}`.includes(\"@\"))\r\n                {\r\n                    if(this.validateEmail(fieldValue))\r\n                    {\r\n                        this.setState({\"login\" : fieldValue})\r\n                        this.setState({fieldType: \"email\", loginAlertMessage: \"success\"})\r\n                    }\r\n                    else\r\n                        this.setState({fieldType: \"email\", loginAlertMessage: \"invalid email!\"})\r\n                }\r\n                else\r\n                    this.setState({fieldType: \"login\", loginAlertMessage: \"Invalid field! Choose either email or phone to login\"})\r\n            }\r\n            else if (fieldName === \"password\")\r\n            {\r\n                if(validatePassword(fieldValue) || fieldValue.length === 0)\r\n                {\r\n                    if(validatePassword(fieldValue))\r\n                        this.setState({password:fieldValue, passwordAlertMessage: \"success\"})\r\n                    else\r\n                        this.setState({password:fieldValue, passwordAlertMessage: \"\"})\r\n                }\r\n                else \r\n                    this.setState({passwordAlertMessage: \"Password must contains at least 6 characters\"})\r\n            }\r\n            else if (fieldName === \"rpassword\")\r\n            {\r\n                if(this.state.password !== fieldValue)\r\n                    this.setState({rpasswordAlertMessage: \"Your password must be same\"})\r\n                else\r\n                {\r\n                    if(fieldValue !== \"\")\r\n                        this.setState({rpassword:fieldValue, rpasswordAlertMessage: \"success\"})\r\n                    else\r\n                        this.setState({rpassword:fieldValue, rpasswordAlertMessage: \"\"})\r\n                }\r\n            }\r\n            else if (fieldName === \"pseudo\")\r\n            {\r\n                var pseudo = /^((?=.*[A-Za-z])[A-Za-z\\d\\W]){3,}$/\r\n                if(!pseudo.test(fieldValue.trim()))\r\n                    this.setState({pseudoAlertMessage: \"Your username must have at least three letters\"})\r\n                else\r\n                {\r\n                    if(fieldValue !== \"\")\r\n                        this.setState({pseudo:fieldValue.trim(), pseudoAlertMessage: \"success\"})\r\n                    else\r\n                        this.setState({pseudo:fieldValue.trim(), pseudoAlertMessage: \"\"})\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    handleLeave = (fieldName:string, fieldValue:string) =>\r\n    {\r\n        \r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <form className = \"register-form\" onSubmit = {this.handleSubmit}>\r\n                <TextFormField fieldType = {this.state.fieldType} fieldName = \"login\" isRequired = {true} placeHolder = \"Enter email or phone number\"  alertMessage = {this.state.loginAlertMessage} onChange = {this.handleChange} onBlur = {this.handleLeave} key = \"register-form-field1\" required />\r\n                <TextFormField fieldType = \"password\" fieldName = \"password\" isRequired = {true} placeHolder = \"Enter your password\" alertMessage = {this.state.passwordAlertMessage} onChange = {this.handleChange} onBlur = {this.handleLeave} key = \"register-form-field3\" required />\r\n                <TextFormField fieldType = \"password\" fieldName = \"rpassword\" isRequired = {true} placeHolder = \"Enter your password again\" alertMessage = {this.state.rpasswordAlertMessage} onChange = {this.handleChange} onBlur = {this.handleLeave} key = \"register-form-field4\" required />\r\n                <label className=\"list-group-item\">\r\n                    <input className=\"form-check-input me-1\" type=\"checkbox\" value=\"\" />\r\n                    Remember me\r\n                </label>\r\n                <SubmitFormButton />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RegisterForm"]},"metadata":{},"sourceType":"module"}