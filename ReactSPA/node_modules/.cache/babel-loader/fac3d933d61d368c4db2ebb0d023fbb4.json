{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\ReactSPA\\\\src\\\\components\\\\shared\\\\textformfield\\\\TextFormField.tsx\";\nimport { Component } from 'react';\nimport darkEmailImage from \"./../../../wwwroot/images/email_dark.png\";\nimport darkPasswordImage from \"./../../../wwwroot/images/lock_dark.png\";\nimport darkPhoneImage from \"./../../../wwwroot/images/phone_dark.png\";\nimport darkLoginImage from \"./../../../wwwroot/images/login_white.png\";\nimport whiteLoginImage from \"./../../../wwwroot/images/login_dark.png\";\nimport \"./TextFormField.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TextFormField extends Component {\n  constructor(...args) {\n    super(...args);\n    this.fieldType = \"\";\n    this.fieldName = \"name\";\n    this.placeHolder = \"Write something here\";\n    this.type = \"\";\n    this.image = whiteLoginImage;\n    this.state = {\n      fieldValue: \"\"\n    };\n    this.props = this.props;\n\n    this.handleChange = event => {\n      this.setState({\n        fieldValue: event.currentTarget.value\n      });\n\n      try {\n        this.props.onChange(this.fieldName, event.currentTarget.value);\n      } catch (error) {}\n    };\n\n    this.handleLeave = event => {\n      try {\n        this.props.onBlur(this.fieldName, event.currentTarget.value);\n      } catch (error) {}\n    };\n\n    this.componentWillMount = () => {\n      let {\n        placeHolder,\n        fieldName\n      } = this.props;\n      if (placeHolder !== undefined && placeHolder !== null) this.placeHolder = placeHolder;\n      if (fieldName !== undefined && fieldName !== null) this.fieldName = fieldName;\n    };\n  }\n\n  fieldTypeAndImage(fieldType) {\n    fieldType = `${fieldType}`.trim().toLocaleLowerCase();\n    const validFieldType = new Set([\"email\", \"password\", \"text\", \"phone\", \"login\"]);\n\n    if (validFieldType.has(fieldType)) {\n      var _email$password$text$, _email$password$text$2;\n\n      this.fieldType = fieldType;\n      this.type = (_email$password$text$ = {\n        \"email\": \"text\",\n        \"password\": \"password\",\n        \"text\": \"text\",\n        \"phone\": \"text\",\n        \"login\": \"text\"\n      }[this.fieldType]) !== null && _email$password$text$ !== void 0 ? _email$password$text$ : \"text\";\n      this.image = (_email$password$text$2 = {\n        \"email\": darkEmailImage,\n        \"password\": darkPasswordImage,\n        \"text\": darkLoginImage,\n        \"phone\": darkPhoneImage,\n        \"login\": darkLoginImage\n      }[this.fieldType]) !== null && _email$password$text$2 !== void 0 ? _email$password$text$2 : this.image;\n    }\n  }\n\n  render() {\n    var _alertMessage, _this$props$isRequire;\n\n    let fieldId = `${this.type}-${Math.random()}`;\n    let alertMessage = this.props.alertMessage;\n    alertMessage = ((_alertMessage = alertMessage) !== null && _alertMessage !== void 0 ? _alertMessage : alertMessage === undefined) ? \"\" : alertMessage;\n    alertMessage = `${this.props.alertMessage}`.toLocaleLowerCase().trim();\n    let isSuccess = false;\n    let isError = false;\n    let {\n      fieldType\n    } = this.props;\n    this.fieldTypeAndImage(fieldType);\n\n    if (alertMessage !== \"\") {\n      isSuccess = alertMessage === \"success\";\n      alertMessage = alertMessage === \"success\" ? \"\" : alertMessage;\n      isError = alertMessage !== \"\" ? true : false;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group row text-form-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm-12\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: alertMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm-12\",\n        children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          className: `col-sm-12 ${isSuccess ? \"success\" : isError ? \"error\" : \"normal\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: fieldId,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              id: fieldId,\n              src: this.image,\n              alt: this.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: this.type,\n            name: this.fieldName,\n            className: \"form-control\",\n            placeholder: this.placeHolder,\n            value: this.state.fieldValue,\n            onChange: this.handleChange,\n            onBlur: this.handleLeave,\n            required: (_this$props$isRequire = this.props.isRequired) !== null && _this$props$isRequire !== void 0 ? _this$props$isRequire : false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default TextFormField;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/shared/textformfield/TextFormField.tsx"],"names":["Component","darkEmailImage","darkPasswordImage","darkPhoneImage","darkLoginImage","whiteLoginImage","TextFormField","fieldType","fieldName","placeHolder","type","image","state","fieldValue","props","handleChange","event","setState","currentTarget","value","onChange","error","handleLeave","onBlur","componentWillMount","undefined","fieldTypeAndImage","trim","toLocaleLowerCase","validFieldType","Set","has","render","fieldId","Math","random","alertMessage","isSuccess","isError","isRequired"],"mappings":"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","sourcesContent":["import {Component} from 'react'\r\n\r\nimport darkEmailImage from \"./../../../wwwroot/images/email_dark.png\"\r\nimport whiteEmailImage from \"./../../../wwwroot/images/email_white.png\"\r\nimport darkPasswordImage from \"./../../../wwwroot/images/lock_dark.png\"\r\nimport whitePasswordImage from \"./../../../wwwroot/images/lock_white.png\"\r\nimport darkPhoneImage from \"./../../../wwwroot/images/phone_dark.png\"\r\nimport whitePhoneImage from \"./../../../wwwroot/images/phone_white.png\"\r\nimport darkLoginImage from \"./../../../wwwroot/images/login_white.png\"\r\nimport whiteLoginImage from \"./../../../wwwroot/images/login_dark.png\"\r\n\r\n\r\nimport \"./TextFormField.css\"\r\n\r\nclass TextFormField extends Component\r\n{\r\n    fieldType = \"\"\r\n    fieldName = \"name\"\r\n    placeHolder = \"Write something here\";\r\n    type:string = \"\"\r\n    image = whiteLoginImage  \r\n    state = {\r\n        fieldValue:\"\"\r\n    }\r\n\r\n    props:any = this.props\r\n\r\n    handleChange = (event:any) => {\r\n        this.setState({fieldValue: event.currentTarget.value})\r\n        try {\r\n            this.props.onChange(this.fieldName, event.currentTarget.value)\r\n        } catch (error) {}\r\n        \r\n    }\r\n\r\n    handleLeave = (event:any) => {\r\n        try {\r\n            this.props.onBlur(this.fieldName, event.currentTarget.value)\r\n        } catch (error) {}\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        let {placeHolder, fieldName} = this.props\r\n        if(placeHolder !== undefined && placeHolder !== null)\r\n            this.placeHolder = placeHolder\r\n\r\n        if(fieldName !== undefined && fieldName !== null)\r\n            this.fieldName = fieldName\r\n    }\r\n\r\n    private fieldTypeAndImage(fieldType: any) {\r\n        fieldType = `${fieldType}`.trim().toLocaleLowerCase()\r\n\r\n        const validFieldType = new Set([\"email\", \"password\", \"text\", \"phone\", \"login\"])\r\n        if (validFieldType.has(fieldType)) {\r\n            this.fieldType = fieldType\r\n            this.type = {\r\n                \"email\": \"text\",\r\n                \"password\": \"password\",\r\n                \"text\": \"text\",\r\n                \"phone\": \"text\",\r\n                \"login\": \"text\"\r\n            }[this.fieldType] ?? \"text\"\r\n            this.image = {\r\n                \"email\": darkEmailImage,\r\n                \"password\": darkPasswordImage,\r\n                \"text\": darkLoginImage,\r\n                \"phone\": darkPhoneImage,\r\n                \"login\": darkLoginImage\r\n            }[this.fieldType] ?? this.image\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let fieldId = `${this.type}-${Math.random()}`\r\n        let alertMessage = this.props.alertMessage\r\n        alertMessage = (alertMessage??(alertMessage === undefined)?\"\":alertMessage) \r\n        alertMessage = `${this.props.alertMessage}`.toLocaleLowerCase().trim()\r\n        let isSuccess = false\r\n        let isError = false\r\n        let {fieldType} =  this.props\r\n        this.fieldTypeAndImage(fieldType)\r\n        if(alertMessage !== \"\")\r\n        {\r\n            isSuccess = alertMessage === \"success\"\r\n            alertMessage = (alertMessage === \"success\")?\"\":alertMessage\r\n            isError = (alertMessage !== \"\")?true:false\r\n        }\r\n\r\n        return (\r\n            <div className = \"form-group row text-form-field\">\r\n                <div className = \"col-sm-12\">    \r\n                    <span>{alertMessage}</span>\r\n                </div>\r\n                <div className = \"col-sm-12\">    \r\n                    <fieldset className = {`col-sm-12 ${((isSuccess)?(\"success\"):((isError)?\"error\":\"normal\"))}`} >\r\n                        <label htmlFor={fieldId}><img id = {fieldId}  src={this.image} alt={this.type} /></label>\r\n                        <input type={this.type} name = {this.fieldName} className=\"form-control\" placeholder={this.placeHolder} value={this.state.fieldValue} onChange={this.handleChange} onBlur = {this.handleLeave} required = {this.props.isRequired??false} />\r\n                    </fieldset>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default TextFormField\r\n"]},"metadata":{},"sourceType":"module"}