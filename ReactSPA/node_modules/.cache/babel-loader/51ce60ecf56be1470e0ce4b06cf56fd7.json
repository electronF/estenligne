{"ast":null,"code":"function validateEmail(text) {\n  let exp = /^([a-zA-Z0-9_\\-.]+)@((\\[\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.)|(([a-zA-Z0-9-]+\\.)+))([a-zA-Z]{2,4}|\\d{1,3})(\\]?)$/;\n  return exp.test(text);\n}\n\nfunction validatePassword(text) {\n  return text.length >= 6;\n}\n\nfunction validateNumber(text) {\n  let exp = /^((00)|(\\+\\d+))?(\\d{6,})$/;\n  return exp.test(text);\n}\n/**\r\n * \r\n * @param url the url\r\n * @param type the type of query POST, GET, PUT, DELETE\r\n * @param data Key value object\r\n * @param successFunction Success function\r\n * @param errorFunction Error function\r\n */\n\n\nfunction postOrUpdateRequest(url, type, data, token, successFunction, errorFunction) {\n  fetch(url, {\n    \"method\": type,\n    \"headers\": {\n      \"content-type\": \"application/json\",\n      \"accept\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    },\n    \"body\": JSON.stringify(data)\n  }).then(response => response.json()).then(result => {\n    successFunction(result);\n  }, error => {\n    errorFunction(error);\n  });\n}\n/**\r\n * \r\n * @param url the endpoint where to send data\r\n * @param type the type of query GET, DELETE\r\n * @param successFunction Success function\r\n * @param errorFunction Error function\r\n */\n\n\nfunction getOrDeleteRequest(url, type, token, successFunction, errorFunction) {\n  fetch(url, {\n    \"method\": type,\n    \"headers\": {\n      \"content-type\": \"application/json\",\n      \"accept\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  }).then(response => response.json()).then(result => {\n    successFunction(result);\n  }, error => {\n    errorFunction(error);\n  });\n}\n\nexport { validateEmail, validateNumber, validatePassword, postOrUpdateRequest, getOrDeleteRequest };","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/shared/utils/functions.tsx"],"names":["validateEmail","text","exp","test","validatePassword","length","validateNumber","postOrUpdateRequest","url","type","data","token","successFunction","errorFunction","fetch","JSON","stringify","then","response","json","result","error","getOrDeleteRequest"],"mappings":"AAAA,SAASA,aAAT,CAAuBC,IAAvB,EACA;AACI,MAAIC,GAAG,GAAG,yGAAV;AACA,SAAOA,GAAG,CAACC,IAAJ,CAASF,IAAT,CAAP;AACH;;AAED,SAASG,gBAAT,CAA0BH,IAA1B,EACA;AACI,SAAOA,IAAI,CAACI,MAAL,IAAe,CAAtB;AACH;;AAED,SAASC,cAAT,CAAwBL,IAAxB,EACA;AACI,MAAIC,GAAG,GAAG,2BAAV;AACA,SAAOA,GAAG,CAACC,IAAJ,CAASF,IAAT,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,SAASM,mBAAT,CAA6BC,GAA7B,EAAyCC,IAAzC,EAAsDC,IAAtD,EAAmEC,KAAnE,EAAiFC,eAAjF,EAA2GC,aAA3G,EACA;AACIC,EAAAA,KAAK,CAACN,GAAD,EAAM;AACP,cAAUC,IADH;AAEP,eAAW;AACP,sBAAgB,kBADT;AAEP,gBAAU,kBAFH;AAGP,uBAAkB,UAASE,KAAM;AAH1B,KAFJ;AAOP,YAAQI,IAAI,CAACC,SAAL,CAAeN,IAAf;AAPD,GAAN,CAAL,CAQOO,IARP,CAQYC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARxB,EASKF,IATL,CAUSG,MAAD,IAAY;AACTR,IAAAA,eAAe,CAACQ,MAAD,CAAf;AACF,GAZT,EAaSC,KAAD,IAAW;AACRR,IAAAA,aAAa,CAACQ,KAAD,CAAb;AACF,GAfT;AAiBH;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,SAASC,kBAAT,CAA4Bd,GAA5B,EAAwCC,IAAxC,EAAqDE,KAArD,EAAmEC,eAAnE,EAA6FC,aAA7F,EACA;AACIC,EAAAA,KAAK,CAACN,GAAD,EAAM;AACP,cAAUC,IADH;AAEP,eAAW;AACP,sBAAgB,kBADT;AAEP,gBAAU,kBAFH;AAGP,uBAAkB,UAASE,KAAM;AAH1B;AAFJ,GAAN,CAAL,CAOOM,IAPP,CAOYC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPxB,EAQKF,IARL,CASSG,MAAD,IAAY;AACTR,IAAAA,eAAe,CAACQ,MAAD,CAAf;AACF,GAXT,EAYSC,KAAD,IAAW;AACRR,IAAAA,aAAa,CAACQ,KAAD,CAAb;AACF,GAdT;AAgBH;;AAEF,SAAQrB,aAAR,EAAuBM,cAAvB,EAAuCF,gBAAvC,EAAyDG,mBAAzD,EAA8Ee,kBAA9E","sourcesContent":["function validateEmail(text:string) \r\n{\r\n    let exp = /^([a-zA-Z0-9_\\-.]+)@((\\[\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.)|(([a-zA-Z0-9-]+\\.)+))([a-zA-Z]{2,4}|\\d{1,3})(\\]?)$/\r\n    return exp.test(text)\r\n}\r\n\r\nfunction validatePassword(text:string)\r\n{\r\n    return text.length >= 6\r\n}\r\n\r\nfunction validateNumber(text:string) \r\n{\r\n    let exp = /^((00)|(\\+\\d+))?(\\d{6,})$/\r\n    return exp.test(text)\r\n}\r\n\r\n/**\r\n * \r\n * @param url the url\r\n * @param type the type of query POST, GET, PUT, DELETE\r\n * @param data Key value object\r\n * @param successFunction Success function\r\n * @param errorFunction Error function\r\n */\r\n function postOrUpdateRequest(url:string, type:string, data:Object, token:string, successFunction:Function, errorFunction:Function)\r\n {    \r\n     fetch(url, {\r\n         \"method\": type,\r\n         \"headers\": {\r\n             \"content-type\": \"application/json\",\r\n             \"accept\": \"application/json\",\r\n             \"Authorization\": `Bearer ${token}`\r\n         },\r\n         \"body\": JSON.stringify(data)\r\n         }).then(response => response.json())\r\n         .then(\r\n             (result) => {\r\n                successFunction(result)\r\n             },\r\n             (error) => {\r\n                errorFunction(error)\r\n             }\r\n         );\r\n }\r\n\r\n \r\n/**\r\n * \r\n * @param url the endpoint where to send data\r\n * @param type the type of query GET, DELETE\r\n * @param successFunction Success function\r\n * @param errorFunction Error function\r\n */\r\n function getOrDeleteRequest(url:string, type:string, token:string, successFunction:Function, errorFunction:Function)\r\n {    \r\n     fetch(url, {\r\n         \"method\": type,\r\n         \"headers\": {\r\n             \"content-type\": \"application/json\",\r\n             \"accept\": \"application/json\",\r\n             \"Authorization\": `Bearer ${token}`\r\n         },\r\n         }).then(response => response.json())\r\n         .then(\r\n             (result) => {\r\n                successFunction(result)\r\n             },\r\n             (error) => {\r\n                errorFunction(error)\r\n             }\r\n    );\r\n }\r\n\r\nexport {validateEmail, validateNumber, validatePassword, postOrUpdateRequest, getOrDeleteRequest}"]},"metadata":{},"sourceType":"module"}