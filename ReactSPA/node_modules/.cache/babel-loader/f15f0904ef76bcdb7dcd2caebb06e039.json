{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\ReactSPA\\\\src\\\\components\\\\Pages\\\\HomePage\\\\Body\\\\Body.tsx\";\nimport { Component } from \"react\";\nimport LeftSide from \"./LeftSide/LeftSide\";\nimport RightSide from './RightSide/RightSide'; // import messageList from \"./../../../../wwwroot/data/messages.json\"\n\nimport { requestWithBody, requestWithoutBody } from \"../../../shared/utils/functions\";\nimport settings from \"./../../../../settings.json\";\nimport \"./Body.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Body extends Component {\n  constructor(...args) {\n    super(...args);\n    this.props = this.props;\n    this.settings = settings;\n    this._msgs = [];\n    this._category = \"\";\n    this._interval = -1;\n    this.unReadMessages = [];\n    this.state = {\n      messages: this._msgs,\n      identity: \"\",\n      id: \"\",\n      senderId: \"\",\n      name: \"\",\n      category: this._category\n    };\n\n    this.markMessageAsReceived = messageId => {\n      var date = new Date().toISOString();\n      requestWithoutBody(`${settings.host}/api/message/received?messageSentId=${messageId}&dateReceived=${date}`, \"POST\", this.props.authToken, result => {}, error => {});\n    };\n\n    this.markMessgeAsRead = messageId => {\n      var date = new Date().toISOString();\n      requestWithoutBody(`${settings.host}​/api​/message​/read?messageSentId=${messageId}&dateRead=${date}`, \"PATCH\", this.props.authToken, result => {\n        var keys = Object.keys(result);\n        if (keys.includes(\"id\")) this.unReadMessages.push(result.id);\n      }, error => {});\n    };\n\n    this.successGetMessages = result => {\n      if (typeof result === \"object\" && result.length !== undefined) {\n        var messages = [];\n\n        for (var message of result) {\n          if (!(message.senderId === this.state.id) && message.dateRead === null) this.markMessgeAsRead(message.id);\n          var newMessage = {\n            identity: this.state.identity,\n            //can be email or id as number\n            userId: this.state.id,\n            //can be email or id as number\n            file: message.file,\n            name: message.senderName,\n            message: message.body,\n            isRead: message.dateRead !== null,\n            isSend: message.dateSent !== null,\n            isReceive: message.dateReceived !== null,\n            isIncomingMessage: !(message.senderId === this.state.id),\n            dateTime: message.dateSent,\n            category: \"person\",\n            isTagget: message.linkedId !== null,\n            isTransfered: message.authorId !== null\n          };\n          messages.push(newMessage);\n        }\n\n        this.setState({\n          messages\n        });\n      } else {\n        alert(\"Error when getting message\");\n      }\n    };\n\n    this.errorGetMessages = error => {\n      console.log(error);\n    };\n\n    this.openConversation = (identity, id, senderId, name, category) => {\n      this.unReadMessages = [];\n      this.setState({\n        identity,\n        id,\n        senderId,\n        name,\n        category,\n        messages: []\n      });\n      clearInterval(this._interval); // this._interval = setInterval(() => this.getAllMessage(id), 1000000)\n\n      this.getAllMessage(id);\n\n      try {\n        this.props.getReceiverInformation(identity, id, name, category);\n      } catch (error) {}\n    };\n\n    this.onSendMessage = (message = \"\", file = \"\", name = \"\", category = \"person\") => {\n      let date = new Date();\n      let datetime = `${date.getFullYear()}-${date.getMonth()}-${date.getDay()}T${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n      let messages = [...this.state.messages];\n      let newMessage = {\n        identity: this.state.identity,\n        userId: this.state.id,\n        file: file,\n        name: name,\n        message: message,\n        isRead: false,\n        isSend: false,\n        isReceive: false,\n        isIncomingMessage: false,\n        dateTime: datetime,\n        category: category\n      };\n      messages.push(newMessage);\n      var shortMessage = {\n        \"senderId\": this.state.id,\n        \"messageTag\": {\n          \"name\": name,\n          \"chatRoomId\": this.state.identity\n        },\n        \"body\": message,\n        \"dateSent\": date.toISOString()\n      }; //SendMessage to the server\n\n      requestWithBody(`${settings.host}/api/message`, \"POST\", shortMessage, this.props.authToken, this.successSendMessage, this.errorSendMessage);\n      this.setState({\n        messages\n      });\n    };\n\n    this.getIncomingMessage = () => {};\n\n    this.successGetIncommingMessage = result => {};\n\n    this.errorGetIncommingMessage = error => {};\n\n    this.successSendMessage = result => {\n      this.getAllMessage(this.state.id);\n    };\n\n    this.errorSendMessage = error => {};\n\n    this.successReceivedMessage = result => {};\n\n    this.errorReceivedMessage = error => {};\n\n    this.successReadMessage = result => {};\n\n    this.errorReadMessage = error => {};\n  }\n\n  getAllMessage(id) {\n    requestWithoutBody(`${settings.host}/api/message/getmany?userChatRoomId=${id}`, \"GET\", this.props.authToken, this.successGetMessages, this.errorGetMessages);\n  } //method to get the list of message in a chat room\n\n\n  render() {\n    let messages = this.state.messages;\n    messages = messages.sort((data1, data2) => {\n      let value1 = new Date(data1.dateTime).getTime();\n      let value2 = new Date(data2.dateTime).getTime();\n      if (value1 < value2) return -1;\n      return 1;\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"homepage-body\",\n      children: [/*#__PURE__*/_jsxDEV(LeftSide, {\n        openConversation: this.openConversation,\n        userProfileId: this.props.userProfileId,\n        authToken: this.props.authToken\n      }, \"home-page-right-side\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RightSide, {\n        chatIsSelected: this.state.identity !== \"\" || this.state.id !== \"\",\n        messages: messages,\n        onSendMessage: this.onSendMessage,\n        userProfileId: this.props.userProfileId,\n        authToken: this.props.authToken,\n        name: this.state.name,\n        category: this.state.category\n      }, \"home-page-leftside\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Body;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/Pages/HomePage/Body/Body.tsx"],"names":["Component","LeftSide","RightSide","requestWithBody","requestWithoutBody","settings","Body","props","_msgs","_category","_interval","unReadMessages","state","messages","identity","id","senderId","name","category","markMessageAsReceived","messageId","date","Date","toISOString","host","authToken","result","error","markMessgeAsRead","keys","Object","includes","push","successGetMessages","length","undefined","message","dateRead","newMessage","userId","file","senderName","body","isRead","isSend","dateSent","isReceive","dateReceived","isIncomingMessage","dateTime","isTagget","linkedId","isTransfered","authorId","setState","alert","errorGetMessages","console","log","openConversation","clearInterval","getAllMessage","getReceiverInformation","onSendMessage","datetime","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","shortMessage","successSendMessage","errorSendMessage","getIncomingMessage","successGetIncommingMessage","errorGetIncommingMessage","successReceivedMessage","errorReceivedMessage","successReadMessage","errorReadMessage","render","sort","data1","data2","value1","getTime","value2","userProfileId"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\r\nimport LeftSide from \"./LeftSide/LeftSide\";\r\nimport RightSide from './RightSide/RightSide';\r\n\r\n// import messageList from \"./../../../../wwwroot/data/messages.json\"\r\nimport { FileDTO, MessageDTO } from \"../../../shared/utils/Types\";\r\nimport { requestWithBody, requestWithoutBody } from \"../../../shared/utils/functions\";\r\nimport settings from \"./../../../../settings.json\";\r\n\r\nimport \"./Body.css\";\r\n\r\nclass Body extends Component\r\n{\r\n    props:any = this.props\r\n    settings = settings\r\n    _msgs: MessageDTO [] = [] \r\n    _category:string|number = \"\"\r\n    _interval:any = -1\r\n    unReadMessages:number[] = []\r\n    state = {\r\n        messages:this._msgs,\r\n        identity:\"\",\r\n        id:\"\",\r\n        senderId: \"\",\r\n        name:\"\",\r\n        category: this._category\r\n    }\r\n\r\n    markMessageAsReceived = (messageId:string|number) =>\r\n    {\r\n        var date = new Date().toISOString()\r\n        requestWithoutBody(\r\n            `${settings.host}/api/message/received?messageSentId=${messageId}&dateReceived=${date}`,\r\n            \"POST\",\r\n            this.props.authToken, \r\n            (result:any)=>{\r\n\r\n            }, \r\n            (error:any)=>{\r\n\r\n            })\r\n    }\r\n\r\n    \r\n    markMessgeAsRead = (messageId:string|number) =>\r\n    {\r\n        var date = new Date().toISOString()\r\n        requestWithoutBody(\r\n            `${settings.host}​/api​/message​/read?messageSentId=${messageId}&dateRead=${date}`,\r\n            \"PATCH\",\r\n            this.props.authToken,\r\n            (result:any)=>{\r\n                var keys = Object.keys(result)\r\n                if(keys.includes(\"id\"))\r\n                this.unReadMessages.push(result.id)\r\n            }, \r\n            (error:any)=>{\r\n\r\n            })\r\n    }\r\n\r\n    successGetMessages = (result:any) =>{\r\n        if(typeof result === \"object\" && result.length !== undefined)\r\n        {\r\n            var messages = [] \r\n            for(var message of result)\r\n            {\r\n                if(!(message.senderId === this.state.id) && message.dateRead === null)\r\n                    this.markMessgeAsRead(message.id)\r\n                \r\n                var newMessage:MessageDTO = {\r\n                    identity:this.state.identity,//can be email or id as number\r\n                    userId:this.state.id,//can be email or id as number\r\n                    file:message.file,\r\n                    name:message.senderName,\r\n                    message:message.body,\r\n                    isRead:message.dateRead !== null,\r\n                    isSend: message.dateSent !== null,\r\n                    isReceive: message.dateReceived !== null,\r\n                    isIncomingMessage: !(message.senderId === this.state.id),\r\n                    dateTime:message.dateSent,\r\n                    category:\"person\",\r\n                    isTagget: message.linkedId !== null,\r\n                    isTransfered: message.authorId !== null\r\n                }\r\n                messages.push(newMessage)\r\n            }\r\n            this.setState({messages})\r\n        }\r\n        else\r\n        {\r\n            alert(\"Error when getting message\")\r\n        }\r\n    }\r\n\r\n    errorGetMessages = (error:any) => {\r\n        console.log(error)\r\n    }\r\n\r\n    getAllMessage(id:string|number)\r\n    {\r\n        requestWithoutBody(`${settings.host}/api/message/getmany?userChatRoomId=${id}`, \"GET\", this.props.authToken, this.successGetMessages, this.errorGetMessages)\r\n    }\r\n    //method to get the list of message in a chat room\r\n    openConversation = (identity:number|string, id:number|string, senderId:number|string, name:string, category:string|number) => {\r\n        this.unReadMessages = []\r\n        this.setState({identity, id, senderId, name, category, messages: []})\r\n        clearInterval(this._interval)\r\n        // this._interval = setInterval(() => this.getAllMessage(id), 1000000)\r\n        this.getAllMessage(id)\r\n        try {\r\n            this.props.getReceiverInformation(identity, id, name, category)\r\n        } catch (error) {}\r\n    }\r\n\r\n    onSendMessage = (message=\"\", file:any=\"\", name = \"\", category=\"person\")=>{\r\n        let date = new Date()\r\n        let datetime = `${date.getFullYear()}-${date.getMonth()}-${date.getDay()}T${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`\r\n        let messages = [...this.state.messages];\r\n        let newMessage: MessageDTO = {\r\n            identity: this.state.identity,\r\n            userId: this.state.id,\r\n            file: file,\r\n            name: name,\r\n            message: message,\r\n            isRead: false,\r\n            isSend: false, \r\n            isReceive: false,\r\n            isIncomingMessage: false,\r\n            dateTime:datetime,\r\n            category: category\r\n        }\r\n\r\n        messages.push(newMessage)\r\n        var shortMessage =     {\r\n            \"senderId\": this.state.id,\r\n            \"messageTag\": {\r\n              \"name\": name,\r\n              \"chatRoomId\": this.state.identity\r\n            },\r\n            \"body\": message,\r\n            \"dateSent\": date.toISOString()\r\n          } \r\n        //SendMessage to the server\r\n        requestWithBody(`${settings.host}/api/message`, \"POST\", shortMessage, this.props.authToken, this.successSendMessage, this.errorSendMessage) \r\n        this.setState({messages})\r\n    }\r\n\r\n    getIncomingMessage = () =>  {\r\n        \r\n    }\r\n\r\n    successGetIncommingMessage = (result:any) => {\r\n\r\n    }\r\n\r\n    errorGetIncommingMessage = (error:any) => {\r\n\r\n    }\r\n\r\n    successSendMessage = (result:any) =>{\r\n        this.getAllMessage(this.state.id)\r\n    }\r\n\r\n    errorSendMessage = (error:any) =>{\r\n\r\n    }\r\n\r\n    successReceivedMessage = (result: any) =>{\r\n\r\n    }\r\n\r\n    errorReceivedMessage = (error: any) =>{\r\n\r\n    }\r\n\r\n    successReadMessage = (result: any) =>{\r\n\r\n    }\r\n\r\n    errorReadMessage = (error: any) =>{\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n        let messages = this.state.messages;\r\n        messages = messages.sort((data1, data2) => {\r\n                let value1 = (new Date(data1.dateTime)).getTime();\r\n                let value2 = (new Date(data2.dateTime)).getTime();\r\n                if(value1<value2) return -1;\r\n                return 1;\r\n             }\r\n            )\r\n        return(\r\n            <div className=\"homepage-body\">\r\n                <LeftSide openConversation = {this.openConversation} userProfileId={this.props.userProfileId} authToken = {this.props.authToken} key=\"home-page-right-side\"/>\r\n                <RightSide chatIsSelected = {this.state.identity !== \"\" || this.state.id !== \"\" } messages = {messages} onSendMessage={this.onSendMessage} userProfileId={this.props.userProfileId} authToken = {this.props.authToken} name={this.state.name} category = {this.state.category} key=\"home-page-leftside\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Body\r\n"]},"metadata":{},"sourceType":"module"}