{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\ReactSPA\\\\src\\\\components\\\\Pages\\\\UserProfilePage\\\\UserProfileForm\\\\UserProfileForm.tsx\";\nimport { Component } from 'react';\nimport TextFormField from \"../../../shared/textformfield/TextFormField\";\nimport SubmitFormButton from \"../../../shared/submitformbutton/SubmitFormButton\";\nimport { validateNumber, validateEmail, validatePassword } from '../../../shared/utils/functions';\nimport camera from \"./../../../../wwwroot/images/camera.png\";\nimport close from \"./../../../../wwwroot/images/times_white.png\";\nimport \"./UserProfileForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UserProfileForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this._img = \"\";\n    this.state = {\n      username: \"\",\n      about: \"Hi! Write me on EstEnLigne.\",\n      identity: \"\",\n      image: this._img,\n      usernameAlertMessage: \"\",\n      aboutAlertMessage: \"\",\n      imageAlertMessage: \"\",\n      dislayUploadImageOptions: false\n    };\n    this.props = this.props;\n\n    this.validateEmail = text => validateEmail(text);\n\n    this.validateNumber = text => validateNumber(text);\n\n    this.validatePassword = text => validatePassword(text);\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      let isValid = this.state.username.length > 2 && this.state.about.length > 2;\n\n      if (isValid) {\n        let data = {\n          name: this.state.username,\n          identity: this.state.identity,\n          about: this.state.about,\n          image: this.state.image\n        };\n\n        if (!(this.state.identity === null || this.state.identity === \"\")) {\n          if (true) {} else {}\n        }\n\n        try {\n          this.props.submitForm(data);\n        } catch (error) {}\n      }\n    };\n\n    this.handleChange = (fieldName, fieldValue) => {\n      let fieldNames = new Set([\"username\", \"about\", \"image\"]);\n      fieldName = fieldName.toLocaleLowerCase().trim();\n\n      if (fieldNames.has(fieldName)) {\n        console.log(fieldName, fieldValue);\n\n        if (fieldName === \"username\") {\n          var validator = /^((?=.*[A-Za-z])[A-Za-z\\d\\W]){3,}$/;\n          if (fieldValue.trim().length === 0) this.setState({\n            usernameAlertMessage: \"This field can not be empty\"\n          });else if (!validator.test(fieldValue.trim())) this.setState({\n            usernameAlertMessage: \"This field must contains at least 3 characters\"\n          });else this.setState({\n            usernameAlertMessage: \"\",\n            username: fieldValue\n          });\n        } else if (fieldName === \"about\") {\n          if (fieldValue.trim().length === 0) this.setState({\n            aboutAlertMessage: \"This field can not be empty\"\n          });else if (fieldValue.trim().length === 0) this.setState({\n            aboutAlertMessage: \"This field must contains at least 3 characters\"\n          });else this.setState({\n            aboutAlertMessage: \"\",\n            about: fieldValue\n          });\n        } else if (fieldName === \"image\") {}\n      }\n    };\n\n    this.takePhoto = event => {};\n\n    this.uploadPhoto = event => {\n      var inputFile = document.createElement(\"input\");\n      inputFile.setAttribute(\"type\", \"file\");\n      inputFile.setAttribute(\"accept\", \"image/*\"); // inputFile.setAttribute(\"multiple\", \"true\")\n\n      inputFile.click();\n\n      inputFile.onchange = event => {\n        var _inputFile$files, _inputFile$files$item, _inputFile$files2, _inputFile$files2$ite;\n\n        console.log((_inputFile$files = inputFile.files) === null || _inputFile$files === void 0 ? void 0 : (_inputFile$files$item = _inputFile$files.item(0)) === null || _inputFile$files$item === void 0 ? void 0 : _inputFile$files$item.name, (_inputFile$files2 = inputFile.files) === null || _inputFile$files2 === void 0 ? void 0 : (_inputFile$files2$ite = _inputFile$files2.item(0)) === null || _inputFile$files2$ite === void 0 ? void 0 : _inputFile$files2$ite.webkitRelativePath);\n      };\n    };\n\n    this.handleLeave = (fieldName, fieldValue) => {};\n\n    this.displayOrHideUploadImageOption = () => {\n      const dislayUploadImageOptions = !this.state.dislayUploadImageOptions;\n      this.setState({\n        dislayUploadImageOptions\n      });\n    };\n  }\n\n  render() {\n    let styleTextarea = {\n      borderColor: this.state.aboutAlertMessage !== \"\" ? \"red\" : \"black\"\n    };\n    let styleDiv = {\n      // background: `url('./../../../../wwwroot/images/person.png')`\n      background: \"gray\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"userprofile-form\",\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userprofile-image\",\n        style: styleDiv,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: this.state.dislayUploadImageOptions ? close : camera,\n            alt: \"select \",\n            title: \"select or take image\",\n            onClick: () => this.displayOrHideUploadImageOption()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this), this.state.dislayUploadImageOptions ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"userprofile-image-option\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: event => this.takePhoto(event),\n              children: \"Take Photo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: event => this.uploadPhoto(event),\n              children: \"Upload photo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 67\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextFormField, {\n        fieldType: \"text\",\n        fieldName: \"username\",\n        isRequired: true,\n        placeHolder: \"Enter your username\",\n        alertMessage: this.state.aboutAlertMessage,\n        onChange: this.handleChange,\n        onBlur: this.handleLeave,\n        required: true\n      }, \"profilepage-form-field1\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: this.state.aboutAlertMessage !== \"\" ? \"text-danger\" : \"text-success\",\n        children: this.state.aboutAlertMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"about\",\n        style: styleTextarea,\n        cols: 30,\n        rows: 2,\n        placeholder: \"Write something about you here\",\n        onChange: event => this.handleChange(\"about\", event.currentTarget.value),\n        onBlur: event => this.handleLeave(\"about\", event.currentTarget.value),\n        value: this.state.about,\n        required: true\n      }, \"profilepage-form-field2\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SubmitFormButton, {\n        buttonName: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default UserProfileForm;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/Pages/UserProfilePage/UserProfileForm/UserProfileForm.tsx"],"names":["Component","TextFormField","SubmitFormButton","validateNumber","validateEmail","validatePassword","camera","close","UserProfileForm","_img","state","username","about","identity","image","usernameAlertMessage","aboutAlertMessage","imageAlertMessage","dislayUploadImageOptions","props","text","handleSubmit","event","preventDefault","isValid","length","data","name","submitForm","error","handleChange","fieldName","fieldValue","fieldNames","Set","toLocaleLowerCase","trim","has","console","log","validator","setState","test","takePhoto","uploadPhoto","inputFile","document","createElement","setAttribute","click","onchange","files","item","webkitRelativePath","handleLeave","displayOrHideUploadImageOption","render","styleTextarea","borderColor","styleDiv","background","currentTarget","value"],"mappings":"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","sourcesContent":["import { Component, FormEvent } from 'react';\r\nimport TextFormField from \"../../../shared/textformfield/TextFormField\";\r\nimport SubmitFormButton from \"../../../shared/submitformbutton/SubmitFormButton\";\r\n\r\nimport { validateNumber, validateEmail, validatePassword } from '../../../shared/utils/functions';\r\nimport { UserProfile } from '../../../shared/utils/Types';\r\nimport defaultProfileImage from \"./../../../../wwwroot/images/person.png\";\r\nimport camera from \"./../../../../wwwroot/images/camera.png\";\r\nimport close from \"./../../../../wwwroot/images/times_white.png\";\r\n\r\nimport \"./UserProfileForm.css\"\r\n\r\nclass UserProfileForm extends Component\r\n{    \r\n    _img:string|Blob|null = \"\";\r\n    state = {\r\n        username: \"\",\r\n        about:\"Hi! Write me on EstEnLigne.\",\r\n        identity: \"\",\r\n        image: this._img,\r\n        usernameAlertMessage:\"\",\r\n        aboutAlertMessage:\"\",\r\n        imageAlertMessage: \"\",\r\n        dislayUploadImageOptions:false\r\n    }\r\n\r\n    props:any = this.props\r\n\r\n    validateEmail = (text:string) => validateEmail(text)\r\n    validateNumber = (text:string) => validateNumber(text)\r\n    validatePassword = (text:string) => validatePassword(text)\r\n\r\n    handleSubmit = (event:FormEvent) => {\r\n        event.preventDefault()\r\n        \r\n        let isValid = this.state.username.length > 2 && this.state.about.length > 2\r\n        if(isValid)\r\n        {    \r\n            let data: UserProfile = {\r\n                name: this.state.username,\r\n                identity: this.state.identity,\r\n                about: this.state.about,\r\n                image: this.state.image\r\n            }\r\n            if(!(this.state.identity === null || this.state.identity === \"\"))\r\n            {\r\n                if(true){}\r\n                else{}\r\n            }\r\n            try {\r\n                this.props.submitForm(data)\r\n            } catch (error) {}\r\n        }\r\n    }\r\n\r\n    handleChange = (fieldName:string, fieldValue:string) => {\r\n        let fieldNames = new Set([\"username\", \"about\", \"image\"])\r\n        fieldName = fieldName.toLocaleLowerCase().trim() \r\n        if(fieldNames.has(fieldName))\r\n        {\r\n            console.log(fieldName, fieldValue)\r\n            if(fieldName === \"username\")\r\n            {\r\n                var validator = /^((?=.*[A-Za-z])[A-Za-z\\d\\W]){3,}$/\r\n                if(fieldValue.trim().length === 0)\r\n                    this.setState({usernameAlertMessage: \"This field can not be empty\"})\r\n                else if(!validator.test(fieldValue.trim()))\r\n                    this.setState({usernameAlertMessage: \"This field must contains at least 3 characters\"})\r\n                else   \r\n                    this.setState({usernameAlertMessage:\"\", username : fieldValue})\r\n            }\r\n            else if (fieldName === \"about\")\r\n            {\r\n                if(fieldValue.trim().length === 0)\r\n                    this.setState({aboutAlertMessage: \"This field can not be empty\"})\r\n                else if(fieldValue.trim().length === 0)\r\n                    this.setState({aboutAlertMessage: \"This field must contains at least 3 characters\"})\r\n                else   \r\n                    this.setState({aboutAlertMessage:\"\", about : fieldValue})\r\n            }\r\n            else if (fieldName === \"image\")\r\n            {\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    takePhoto = (event:any) =>\r\n    {\r\n\r\n    }\r\n\r\n    uploadPhoto = (event:any) =>\r\n    {\r\n        var inputFile = document.createElement(\"input\")\r\n        inputFile.setAttribute(\"type\", \"file\")\r\n        inputFile.setAttribute(\"accept\", \"image/*\")\r\n        // inputFile.setAttribute(\"multiple\", \"true\")\r\n        inputFile.click()\r\n        inputFile.onchange = (event) => {console.log(inputFile.files?.item(0)?.name, inputFile.files?.item(0)?.webkitRelativePath)}\r\n    }\r\n\r\n    handleLeave = (fieldName:string, fieldValue:string) =>\r\n    {\r\n        \r\n    }\r\n\r\n    displayOrHideUploadImageOption = () => {\r\n        const dislayUploadImageOptions = !this.state.dislayUploadImageOptions\r\n        this.setState({dislayUploadImageOptions})\r\n    }\r\n\r\n    render(){\r\n        let styleTextarea = {\r\n            borderColor:(this.state.aboutAlertMessage!==\"\")?(\"red\"):(\"black\"),\r\n        }\r\n        let styleDiv = {\r\n            // background: `url('./../../../../wwwroot/images/person.png')`\r\n            background: \"gray\"\r\n        }\r\n        return (\r\n            <form className = \"userprofile-form\" onSubmit = {this.handleSubmit}>\r\n                <div className=\"userprofile-image\" style = {styleDiv}>\r\n                    <div>\r\n                        <img src={(this.state.dislayUploadImageOptions)?close:camera} alt=\"select \" title = \"select or take image\" onClick={() => this.displayOrHideUploadImageOption()} />\r\n                        {\r\n                            (this.state.dislayUploadImageOptions)?<div className=\"userprofile-image-option\">\r\n                                <span onClick = {(event) => this.takePhoto(event)}>Take Photo</span>\r\n                                <span onClick = {(event) => this.uploadPhoto(event)}>Upload photo</span>\r\n                            </div>:null\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <TextFormField fieldType = \"text\" fieldName = \"username\" isRequired = {true} placeHolder = \"Enter your username\" alertMessage = {this.state.aboutAlertMessage} onChange = {this.handleChange} onBlur = {this.handleLeave} key = \"profilepage-form-field1\" required />\r\n                <span className={(this.state.aboutAlertMessage !== \"\")?\"text-danger\":\"text-success\"}>{this.state.aboutAlertMessage}</span>\r\n                <textarea name=\"about\" style = {styleTextarea} cols={30} rows = {2} placeholder='Write something about you here' onChange = {(event) => this.handleChange(\"about\",  event.currentTarget.value)}  onBlur = {(event) => this.handleLeave(\"about\", event.currentTarget.value)} value={this.state.about} key = \"profilepage-form-field2\" required/>\r\n                <SubmitFormButton buttonName = \"Save\" />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserProfileForm"]},"metadata":{},"sourceType":"module"}