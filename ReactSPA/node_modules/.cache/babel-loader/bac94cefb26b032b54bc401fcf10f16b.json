{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\src\\\\components\\\\Pages\\\\HomePage\\\\Body\\\\Body.tsx\";\nimport { Component } from \"react\";\nimport LeftSide from \"./LeftSide/LeftSide\";\nimport RightSide from './RightSide/RightSide';\nimport \"./Body.css\";\nimport messageList from \"./messages.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Body extends Component {\n  constructor(...args) {\n    super(...args);\n    this.props = this.props;\n    this.state = {\n      messages: [],\n      email: \"\",\n      id: \"\"\n    };\n\n    this.sendMessage = (event, message) => {\n      let date = new Date();\n      let datetime = `${date.getFullYear()}-${date.getMonth()}-${date.getDay()}T${date.getHours()}:${date.getMinutes()}`;\n      let messages = [...this.state.messages];\n      let newMessage = {\n        from: this.props.user.email,\n        to: validateEmail(this.state.email) ? this.state.email : this.state.id,\n        file: \"\",\n        name: this.props.user.username,\n        message: message,\n        isRead: false,\n        isSend: true,\n        isReceive: false,\n        incommingMessage: false,\n        dateTime: string,\n        type: string\n      };\n      messages.push({\n        \"message\": message\n      });\n    };\n  }\n\n  openDiscution(email, id) {\n    //select all the message for this discution in the data base\n    let newMessages = messageList.filter(data => filterCondition(data, id, email)); //map if necessaire \n\n    let messages = newMessages.map(data => {\n      let message = data;\n      return message;\n    });\n    this.setState({\n      messages,\n      email,\n      id\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"homepage-body\",\n      children: [/*#__PURE__*/_jsxDEV(LeftSide, {\n        openDiscution: this.openDiscution\n      }, \"home-page-right-side\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RightSide, {\n        messages: this.state.messages,\n        onSubmit: this.sendMessage\n      }, \"home-page-leftside\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction validateEmail(email) {\n  return true;\n}\n\nfunction filterCondition(data, id, email) {\n  return data.id === id || data.email.toLowerCase().trim() === email.toLowerCase().trim();\n}\n\nexport default Body;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/src/components/Pages/HomePage/Body/Body.tsx"],"names":["Component","LeftSide","RightSide","messageList","Body","props","state","messages","email","id","sendMessage","event","message","date","Date","datetime","getFullYear","getMonth","getDay","getHours","getMinutes","newMessage","from","user","to","validateEmail","file","name","username","isRead","isSend","isReceive","incommingMessage","dateTime","string","type","push","openDiscution","newMessages","filter","data","filterCondition","map","setState","render","toLowerCase","trim"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\r\nimport LeftSide from \"./LeftSide/LeftSide\";\r\nimport RightSide from './RightSide/RightSide';\r\n\r\nimport \"./Body.css\";\r\n\r\nimport messageList from \"./messages.json\"\r\nimport { IncomingMessage } from \"http\";\r\n\r\nclass Body extends Component\r\n{\r\n    props:any = this.props\r\n    state = {\r\n        messages:[],\r\n        email:\"\",\r\n        id:\"\"\r\n    }\r\n    openDiscution(email:string, id:number|string)\r\n    {\r\n        //select all the message for this discution in the data base\r\n        let newMessages = messageList.filter(data => filterCondition(data, id, email))\r\n        //map if necessaire \r\n        let messages = newMessages.map(data => {\r\n            let message:Message = data\r\n            return message\r\n        }) \r\n        this.setState({messages, email, id})\r\n    }\r\n\r\n    sendMessage = (event:any, message:string)=>{\r\n        let date = new Date()\r\n        let datetime = `${date.getFullYear()}-${date.getMonth()}-${date.getDay()}T${date.getHours()}:${date.getMinutes()}`\r\n        let messages = [...this.state.messages];\r\n        let newMessage:Message = {\r\n            from: this.props.user.email,\r\n            to: validateEmail(this.state.email)?this.state.email:this.state.id,\r\n            file:\"\",\r\n            name: this.props.user.username,\r\n            message: message,\r\n            isRead: false,\r\n            isSend: true,\r\n            isReceive: false,\r\n            incommingMessage: false,\r\n            dateTime:string,\r\n            type:string\r\n\r\n        }\r\n        messages.push({\"message\":message, })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"homepage-body\">\r\n                <LeftSide openDiscution = {this.openDiscution} key=\"home-page-right-side\"/>\r\n                <RightSide messages = {this.state.messages} onSubmit={this.sendMessage} key=\"home-page-leftside\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction validateEmail(email:string):boolean\r\n{\r\n    return true\r\n}\r\n\r\nfunction filterCondition(data: { email: string; id: string|number; file: string; name: string; message: string; isRead: boolean; isSend: boolean; isReceive: boolean; incomingMessage:boolean, dateTime: string; type: string; }, id: string | number, email: string): unknown {\r\n    return (data.id === id || data.email.toLowerCase().trim() === email.toLowerCase().trim());\r\n}\r\n\r\ninterface Message {\r\n    email:string,//can be email or id as number\r\n    id:string|number,//can be email or id as number\r\n    file:Blob|string,\r\n    name:string,\r\n    message:string,\r\n    isRead:boolean,\r\n    isSend:boolean,\r\n    isReceive:boolean,\r\n    incomingMessage: boolean,\r\n    dateTime:string,\r\n    type:string\r\n}\r\n\r\nexport default Body\r\n"]},"metadata":{},"sourceType":"module"}