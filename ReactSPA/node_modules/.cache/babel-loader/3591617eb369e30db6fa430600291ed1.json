{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\ReactSPA\\\\src\\\\components\\\\shared\\\\textformfield\\\\TextFormField.tsx\";\nimport { Component } from 'react';\nimport darkEmailImage from \"./../../../wwwroot/images/email_dark.png\";\nimport darkPasswordImage from \"./../../../wwwroot/images/lock_dark.png\";\nimport darkPhoneImage from \"./../../../wwwroot/images/phone_dark.png\";\nimport darkLoginImage from \"./../../../wwwroot/images/login_white.png\";\nimport whiteLoginImage from \"./../../../wwwroot/images/login_dark.png\";\nimport \"./TextFormField.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TextFormField extends Component {\n  constructor(...args) {\n    super(...args);\n    this.fieldType = \"\";\n    this.fieldName = \"name\";\n    this.isRequired = false;\n    this.placeHolder = \"Write something here\";\n    this.type = \"\";\n    this.image = whiteLoginImage;\n    this.isFocused = false;\n    this.state = {\n      fieldValue: \"\"\n    };\n    this.props = this.props;\n\n    this.handleChange = event => {\n      this.setState({\n        fieldValue: event.currentTarget.value\n      });\n\n      try {\n        this.props.onChange(this.fieldName, event.currentTarget.value);\n      } catch (error) {}\n    };\n\n    this.handleLeave = event => {\n      this.isFocused = false;\n      this.onMouseLeave(event);\n\n      try {\n        this.props.onBlur(this.fieldName, event.currentTarget.value);\n      } catch (error) {}\n    };\n\n    this.componentWillMount = () => {\n      let {\n        placeHolder,\n        fieldName,\n        isRequired\n      } = this.props;\n      if (placeHolder !== undefined && placeHolder !== null) this.placeHolder = placeHolder;\n      if (fieldName !== undefined && fieldName !== null) this.fieldName = fieldName;\n      if (isRequired !== undefined && isRequired !== null) this.isRequired = isRequired;\n    };\n\n    this.onMouseEnter = event => {\n      if (!this.isFocused) {\n        let parentElment = event.currentTarget.parentElement;\n        parentElment === null || parentElment === void 0 ? void 0 : parentElment.style.setProperty(\"box-shadow\", \"0 0 4px 2px rgb(0, 0, 100)\");\n        parentElment === null || parentElment === void 0 ? void 0 : parentElment.style.setProperty(\"border-color\", \"skyblue !important\");\n      }\n    };\n\n    this.onFocus = event => {\n      this.isFocused = true;\n      let parentElment = event.currentTarget.parentElement;\n      parentElment === null || parentElment === void 0 ? void 0 : parentElment.style.setProperty(\"box-shadow\", \"0 0 4px 2px blue\");\n    };\n\n    this.onMouseLeave = event => {\n      if (!this.isFocused) {\n        let parentElment = event.currentTarget.parentElement;\n        parentElment === null || parentElment === void 0 ? void 0 : parentElment.style.setProperty(\"box-shadow\", \"none\");\n        parentElment === null || parentElment === void 0 ? void 0 : parentElment.style.setProperty(\"border-color\", \"skyblue !important\");\n      }\n    };\n  }\n\n  fieldTypeAndImage(fieldType) {\n    fieldType = `${fieldType}`.trim().toLocaleLowerCase();\n    const validFieldType = new Set([\"email\", \"password\", \"text\", \"phone\", \"login\"]);\n\n    if (validFieldType.has(fieldType)) {\n      var _email$password$text$, _email$password$text$2;\n\n      this.fieldType = fieldType;\n      this.type = (_email$password$text$ = {\n        \"email\": \"text\",\n        \"password\": \"password\",\n        \"text\": \"text\",\n        \"phone\": \"text\",\n        \"login\": \"text\"\n      }[this.fieldType]) !== null && _email$password$text$ !== void 0 ? _email$password$text$ : \"text\";\n      this.image = (_email$password$text$2 = {\n        \"email\": darkEmailImage,\n        \"password\": darkPasswordImage,\n        \"text\": darkLoginImage,\n        \"phone\": darkPhoneImage,\n        \"login\": darkLoginImage\n      }[this.fieldType]) !== null && _email$password$text$2 !== void 0 ? _email$password$text$2 : this.image;\n    }\n  }\n\n  render() {\n    var _alertMessage;\n\n    let fieldId = `${this.type}-${Math.random()}`;\n    let alertMessage = this.props.alertMessage;\n    alertMessage = ((_alertMessage = alertMessage) !== null && _alertMessage !== void 0 ? _alertMessage : alertMessage === undefined) ? \"\" : alertMessage;\n    alertMessage = `${this.props.alertMessage}`.toLocaleLowerCase().trim();\n    let isSuccess = false;\n    let isError = false;\n    let {\n      fieldType\n    } = this.props;\n    this.fieldTypeAndImage(fieldType);\n\n    if (alertMessage !== \"\") {\n      isSuccess = alertMessage === \"success\";\n      alertMessage = alertMessage === \"success\" ? \"\" : alertMessage;\n      isError = alertMessage !== \"\" ? true : false;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group row text-form-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm-12\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: alertMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm-12\",\n        children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          className: `col-sm-12 ${isSuccess ? \"success\" : isError ? \"error\" : \"normal\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: fieldId,\n            onMouseEnter: this.onMouseEnter,\n            onMouseLeave: this.onMouseLeave,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.image,\n              alt: this.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 120\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: this.type,\n            id: fieldId,\n            name: this.fieldName,\n            className: \"form-control\",\n            onFocus: this.onFocus,\n            onMouseEnter: this.onMouseEnter,\n            onMouseLeave: this.onMouseLeave,\n            placeholder: this.placeHolder,\n            value: this.state.fieldValue,\n            onChange: this.handleChange,\n            onBlur: this.handleLeave,\n            required: this.isRequired\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default TextFormField;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/shared/textformfield/TextFormField.tsx"],"names":["Component","darkEmailImage","darkPasswordImage","darkPhoneImage","darkLoginImage","whiteLoginImage","TextFormField","fieldType","fieldName","isRequired","placeHolder","type","image","isFocused","state","fieldValue","props","handleChange","event","setState","currentTarget","value","onChange","error","handleLeave","onMouseLeave","onBlur","componentWillMount","undefined","onMouseEnter","parentElment","parentElement","style","setProperty","onFocus","fieldTypeAndImage","trim","toLocaleLowerCase","validFieldType","Set","has","render","fieldId","Math","random","alertMessage","isSuccess","isError"],"mappings":"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","sourcesContent":["import { Component, FormEvent } from 'react';\r\n\r\nimport darkEmailImage from \"./../../../wwwroot/images/email_dark.png\"\r\nimport whiteEmailImage from \"./../../../wwwroot/images/email_white.png\"\r\nimport darkPasswordImage from \"./../../../wwwroot/images/lock_dark.png\"\r\nimport whitePasswordImage from \"./../../../wwwroot/images/lock_white.png\"\r\nimport darkPhoneImage from \"./../../../wwwroot/images/phone_dark.png\"\r\nimport whitePhoneImage from \"./../../../wwwroot/images/phone_white.png\"\r\nimport darkLoginImage from \"./../../../wwwroot/images/login_white.png\"\r\nimport whiteLoginImage from \"./../../../wwwroot/images/login_dark.png\"\r\n\r\n\r\nimport \"./TextFormField.css\"\r\n\r\nclass TextFormField extends Component\r\n{\r\n    fieldType = \"\"\r\n    fieldName = \"name\"\r\n    isRequired = false\r\n    placeHolder = \"Write something here\";\r\n    type:string = \"\"\r\n    image = whiteLoginImage\r\n    isFocused = false\r\n    state = {\r\n        fieldValue:\"\"\r\n    }\r\n\r\n    props:any = this.props\r\n\r\n    handleChange = (event:any) => {\r\n        this.setState({fieldValue: event.currentTarget.value})\r\n        try {\r\n            this.props.onChange(this.fieldName, event.currentTarget.value)\r\n        } catch (error) {}\r\n        \r\n    }\r\n\r\n    handleLeave = (event:any) => {\r\n        this.isFocused = false\r\n        this.onMouseLeave(event)\r\n        try {\r\n            this.props.onBlur(this.fieldName, event.currentTarget.value)\r\n        } catch (error) {}\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        let {placeHolder, fieldName, isRequired} = this.props\r\n        if(placeHolder !== undefined && placeHolder !== null)\r\n            this.placeHolder = placeHolder\r\n\r\n        if(fieldName !== undefined && fieldName !== null)\r\n            this.fieldName = fieldName\r\n        \r\n        if(isRequired !== undefined && isRequired !== null)\r\n            this.isRequired = isRequired\r\n    }\r\n\r\n    private fieldTypeAndImage(fieldType: any) {\r\n        fieldType = `${fieldType}`.trim().toLocaleLowerCase()\r\n\r\n        const validFieldType = new Set([\"email\", \"password\", \"text\", \"phone\", \"login\"])\r\n        if (validFieldType.has(fieldType)) {\r\n            this.fieldType = fieldType\r\n            this.type = {\r\n                \"email\": \"text\",\r\n                \"password\": \"password\",\r\n                \"text\": \"text\",\r\n                \"phone\": \"text\",\r\n                \"login\": \"text\"\r\n            }[this.fieldType] ?? \"text\"\r\n            this.image = {\r\n                \"email\": darkEmailImage,\r\n                \"password\": darkPasswordImage,\r\n                \"text\": darkLoginImage,\r\n                \"phone\": darkPhoneImage,\r\n                \"login\": darkLoginImage\r\n            }[this.fieldType] ?? this.image\r\n        }\r\n    }\r\n\r\n    onMouseEnter = (event:FormEvent) => {\r\n        if(!this.isFocused)\r\n        {\r\n            let parentElment = event.currentTarget.parentElement;\r\n            parentElment?.style.setProperty(\"box-shadow\", \"0 0 4px 2px rgb(0, 0, 100)\")\r\n            parentElment?.style.setProperty(\"border-color\", \"skyblue !important\")\r\n        }\r\n    }\r\n\r\n    onFocus = (event:FormEvent) => {\r\n        this.isFocused = true;\r\n        let parentElment = event.currentTarget.parentElement;\r\n        parentElment?.style.setProperty(\"box-shadow\", \"0 0 4px 2px blue\")\r\n    }\r\n\r\n    onMouseLeave = (event:FormEvent) => {\r\n        if(!this.isFocused)\r\n        {\r\n            let parentElment = event.currentTarget.parentElement;\r\n            parentElment?.style.setProperty(\"box-shadow\", \"none\")\r\n            parentElment?.style.setProperty(\"border-color\", \"skyblue !important\")\r\n        } \r\n    }\r\n\r\n    render(){\r\n        let fieldId = `${this.type}-${Math.random()}`\r\n        let alertMessage = this.props.alertMessage\r\n        alertMessage = (alertMessage??(alertMessage === undefined)?\"\":alertMessage) \r\n        alertMessage = `${this.props.alertMessage}`.toLocaleLowerCase().trim()\r\n        let isSuccess = false\r\n        let isError = false\r\n        let {fieldType} =  this.props\r\n        this.fieldTypeAndImage(fieldType)\r\n        if(alertMessage !== \"\")\r\n        {\r\n            isSuccess = alertMessage === \"success\"\r\n            alertMessage = (alertMessage === \"success\")?\"\":alertMessage\r\n            isError = (alertMessage !== \"\")?true:false\r\n        }\r\n\r\n        return (\r\n            <div className = \"form-group row text-form-field\">\r\n                <div className = \"col-sm-12\">    \r\n                    <span>{alertMessage}</span>\r\n                </div>\r\n                <div className = \"col-sm-12\">    \r\n                    <fieldset className = {`col-sm-12 ${((isSuccess)?(\"success\"):((isError)?\"error\":\"normal\"))}`} >\r\n                        <label htmlFor={fieldId} onMouseEnter = {this.onMouseEnter} onMouseLeave = {this.onMouseLeave}><img  src={this.image} alt={this.type} /></label>\r\n                        <input type={this.type} id = {fieldId} name = {this.fieldName} className=\"form-control\" onFocus = {this.onFocus}  onMouseEnter = {this.onMouseEnter} onMouseLeave = {this.onMouseLeave} placeholder={this.placeHolder} value={this.state.fieldValue} onChange={this.handleChange} onBlur = {this.handleLeave} required = {this.isRequired} />\r\n                    </fieldset>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default TextFormField\r\n"]},"metadata":{},"sourceType":"module"}