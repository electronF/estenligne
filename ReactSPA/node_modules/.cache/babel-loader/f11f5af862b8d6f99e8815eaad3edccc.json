{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\src\\\\components\\\\Pages\\\\HomePage\\\\Body\\\\Body.tsx\";\nimport { Component } from \"react\";\nimport LeftSide from \"./LeftSide/LeftSide\";\nimport RightSide from './RightSide/RightSide';\nimport \"./Body.css\";\nimport messageList from \"./../../../../wwwroot/data/messages.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Body extends Component {\n  constructor(...args) {\n    super(...args);\n    this.props = this.props;\n    this._msgs = [];\n    this._category = \"\";\n    this.state = {\n      messages: this._msgs,\n      email: \"\",\n      id: \"\",\n      name: \"\",\n      category: this._category\n    };\n\n    this.openConversation = (email, id, name, category) => {\n      //select all the message for this discution in the data base\n      let messages = messageList.filter(data => filterCondition(data, id, email)); //map if necessaire \n\n      this.setState({\n        messages,\n        email,\n        id,\n        name,\n        category\n      });\n    };\n\n    this.onSendMessage = (message = \"\", file = \"\", name = \"\", category = \"person\") => {\n      let date = new Date();\n      let datetime = `${date.getFullYear()}-${date.getMonth()}-${date.getDay()}T${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n      let messages = [...this.state.messages];\n      let newMessage = {\n        email: this.state.email,\n        id: this.state.id,\n        file: file,\n        name: name,\n        message: message,\n        isRead: false,\n        isSend: true,\n        isReceive: false,\n        isIncomingMessage: false,\n        dateTime: datetime,\n        category: category\n      };\n      messages.push(newMessage);\n      this.setState({\n        messages\n      });\n    };\n  }\n\n  render() {\n    let messages = this.state.messages;\n    messages = messages.sort((data1, data2) => {\n      let value1 = new Date(data1.dateTime).getTime();\n      let value2 = new Date(data2.dateTime).getTime();\n      if (value1 < value2) return -1;\n      return 1;\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"homepage-body\",\n      children: [/*#__PURE__*/_jsxDEV(LeftSide, {\n        openConversation: this.openConversation\n      }, \"home-page-right-side\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RightSide, {\n        chatIsSelected: this.state.email !== \"\" || this.state.id !== \"\",\n        messages: messages,\n        onSendMessage: this.onSendMessage,\n        name: this.state.name,\n        category: this.state.category\n      }, \"home-page-leftside\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction filterCondition(data, id, email) {\n  return data.id === id || data.email.toLowerCase().trim() === email.toLowerCase().trim();\n}\n\nexport default Body;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/src/components/Pages/HomePage/Body/Body.tsx"],"names":["Component","LeftSide","RightSide","messageList","Body","props","_msgs","_category","state","messages","email","id","name","category","openConversation","filter","data","filterCondition","setState","onSendMessage","message","file","date","Date","datetime","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","newMessage","isRead","isSend","isReceive","isIncomingMessage","dateTime","push","render","sort","data1","data2","value1","getTime","value2","toLowerCase","trim"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\r\nimport LeftSide from \"./LeftSide/LeftSide\";\r\nimport RightSide from './RightSide/RightSide';\r\n\r\nimport \"./Body.css\";\r\n\r\nimport messageList from \"./../../../../wwwroot/data/messages.json\"\r\n\r\nclass Body extends Component\r\n{\r\n    props:any = this.props\r\n    _msgs:Message[] = [] \r\n    _category:string|number = \"\"\r\n    state = {\r\n        messages:this._msgs,\r\n        email:\"\",\r\n        id:\"\",\r\n        name:\"\",\r\n        category: this._category\r\n    }\r\n\r\n    openConversation = (email:string, id:number|string, name:string, category:string|number) => {\r\n        //select all the message for this discution in the data base\r\n        let messages = messageList.filter(data => filterCondition(data, id, email))\r\n        //map if necessaire \r\n        this.setState({messages, email, id, name, category})\r\n    }\r\n\r\n    onSendMessage = (message=\"\", file:any=\"\", name = \"\", category=\"person\")=>{\r\n        let date = new Date()\r\n        let datetime = `${date.getFullYear()}-${date.getMonth()}-${date.getDay()}T${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`\r\n        let messages = [...this.state.messages];\r\n        let newMessage: Message = {\r\n            email: this.state.email,\r\n            id: this.state.id,\r\n            file: file,\r\n            name: name,\r\n            message: message,\r\n            isRead: false,\r\n            isSend: true,\r\n            isReceive: false,\r\n            isIncomingMessage: false,\r\n            dateTime:datetime,\r\n            category: category\r\n        }\r\n        messages.push(newMessage)\r\n        this.setState({messages})\r\n    }\r\n\r\n    render(){\r\n        let messages = this.state.messages;\r\n        messages = messages.sort((data1, data2) => {\r\n                let value1 = (new Date(data1.dateTime)).getTime();\r\n                let value2 = (new Date(data2.dateTime)).getTime();\r\n                if(value1<value2) return -1;\r\n                return 1;\r\n             }\r\n            )\r\n        return(\r\n            <div className=\"homepage-body\">\r\n                <LeftSide openConversation = {this.openConversation} key=\"home-page-right-side\"/>\r\n                <RightSide chatIsSelected = {this.state.email !== \"\" || this.state.id !== \"\" } messages = {messages} onSendMessage={this.onSendMessage} name={this.state.name} category = {this.state.category} key=\"home-page-leftside\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction filterCondition(data: { email: string; id: string|number; file: string; name: string; message: string; isRead: boolean; isSend: boolean; isReceive: boolean; isIncomingMessage:boolean, dateTime: string; category: string; }, id: string | number, email: string): unknown {\r\n    return (data.id === id || data.email.toLowerCase().trim() === email.toLowerCase().trim());\r\n}\r\n\r\ninterface Message {\r\n    email:string,//can be email or id as number\r\n    id:string|number,//can be email or id as number\r\n    file:Blob|string,\r\n    name:string,\r\n    message:string,\r\n    isRead:boolean,\r\n    isSend:boolean,\r\n    isReceive:boolean,\r\n    isIncomingMessage: boolean,\r\n    dateTime:string,\r\n    category:string\r\n}\r\n\r\nexport default Body\r\n"]},"metadata":{},"sourceType":"module"}