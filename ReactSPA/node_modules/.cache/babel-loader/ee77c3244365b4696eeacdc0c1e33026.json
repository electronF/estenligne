{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ketis\\\\Documents\\\\estenligne\\\\ReactSPA\\\\src\\\\components\\\\Pages\\\\LoginPage\\\\LoginForm\\\\LoginForm.tsx\";\nimport { Component } from \"react\";\nimport TextFormField from \"../../../shared/textformfield/TextFormField\";\nimport SubmitFormButton from '../../../shared/submitformbutton/SubmitFormButton';\nimport { validateEmail, validateNumber } from \"../../../shared/utils/functions\";\nimport \"./LoginForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LoginForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fieldType: \"login\",\n      login: \"\",\n      password: \"\",\n      loginAlertMessage: \"\",\n      passwordAlertMessage: \"\"\n    };\n    this.props = this.props;\n\n    this.validateEmail = text => validateEmail(text);\n\n    this.validateNumber = text => validateNumber(text);\n\n    this.handleChange = (fieldName, fieldValue) => {\n      console.log(fieldName, fieldValue);\n      let fieldNames = new Set([\"login\", \"password\"]);\n      fieldName = fieldName.toLocaleLowerCase().trim();\n\n      if (fieldNames.has(fieldName)) {\n        this.setState({\n          fieldName: fieldValue\n        });\n\n        if (fieldName === \"login\" && fieldValue !== \"\") {\n          if (!isNaN(parseInt(fieldValue))) {\n            if (this.validateNumber(fieldValue)) this.setState({\n              fieldType: \"phone\",\n              loginAlertMessage: \"success\"\n            });else this.setState({\n              fieldType: \"phone\",\n              loginAlertMessage: \"Invalid Phone number!\"\n            });\n          } else if (`${fieldValue}`.includes(\"@\")) {\n            if (this.validateEmail(fieldValue)) this.setState({\n              fieldType: \"email\",\n              loginAlertMessage: \"success\"\n            });else this.setState({\n              fieldType: \"email\",\n              loginAlertMessage: \"invalid email!\"\n            });\n          } else this.setState({\n            fieldType: \"login\",\n            loginAlertMessage: \"invalid field! Choose either email or phone to login\"\n          });\n        }\n      }\n    };\n\n    this.handleLeave = (fieldName, fieldValue) => {};\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"login-form\",\n      children: [/*#__PURE__*/_jsxDEV(TextFormField, {\n        fieldName: \"login\",\n        fieldType: this.state.fieldType,\n        alertMessage: this.state.loginAlertMessage,\n        onChange: this.handleChange,\n        onBlur: this.handleLeave\n      }, \"login-form-field1\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TextFormField, {\n        fieldName: \"password\",\n        fieldType: \"password\",\n        alertMessage: this.state.passwordAlertMessage,\n        onChange: this.handleChange,\n        onBlur: this.handleLeave\n      }, \"login-form-field2\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(SubmitFormButton, {\n        buttonName: \"LOGIN\"\n      }, \"login-form-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default LoginForm;","map":{"version":3,"sources":["C:/Users/ketis/Documents/estenligne/ReactSPA/src/components/Pages/LoginPage/LoginForm/LoginForm.tsx"],"names":["Component","TextFormField","SubmitFormButton","validateEmail","validateNumber","LoginForm","state","fieldType","login","password","loginAlertMessage","passwordAlertMessage","props","text","handleChange","fieldName","fieldValue","console","log","fieldNames","Set","toLocaleLowerCase","trim","has","setState","isNaN","parseInt","includes","handleLeave","render"],"mappings":"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","sourcesContent":["import {Component} from \"react\"\r\n\r\nimport TextFormField from \"../../../shared/textformfield/TextFormField\"\r\nimport SubmitFormButton from '../../../shared/submitformbutton/SubmitFormButton';\r\n\r\nimport { validateEmail, validateNumber } from \"../../../shared/utils/functions\";\r\n\r\nimport \"./LoginForm.css\"\r\n\r\nclass LoginForm extends Component{\r\n    \r\n    state = {\r\n        fieldType: \"login\",\r\n        login:\"\",\r\n        password:\"\",\r\n        loginAlertMessage:\"\",\r\n        passwordAlertMessage: \"\"\r\n    }\r\n\r\n    props:any = this.props\r\n\r\n    validateEmail = (text:string) => validateEmail(text)\r\n    validateNumber = (text:string) => validateNumber(text)\r\n\r\n    handleChange = (fieldName:string, fieldValue:string) => {\r\n        console.log(fieldName, fieldValue)\r\n        let fieldNames = new Set([\"login\", \"password\"])\r\n        fieldName = fieldName.toLocaleLowerCase().trim() \r\n        if(fieldNames.has(fieldName))\r\n        {\r\n            this.setState({fieldName : fieldValue})\r\n            if(fieldName === \"login\" && fieldValue !== \"\")\r\n            {\r\n                if(!isNaN(parseInt(fieldValue)))\r\n                {\r\n                    if(this.validateNumber(fieldValue))\r\n                        this.setState({fieldType: \"phone\", loginAlertMessage: \"success\"})\r\n                    else\r\n                    this.setState({fieldType: \"phone\", loginAlertMessage: \"Invalid Phone number!\"})\r\n                }\r\n                else if(`${fieldValue}`.includes(\"@\"))\r\n                {\r\n                    if(this.validateEmail(fieldValue))\r\n                        this.setState({fieldType: \"email\", loginAlertMessage: \"success\"})\r\n                    else\r\n                        this.setState({fieldType: \"email\", loginAlertMessage: \"invalid email!\"})\r\n                }\r\n                else\r\n                    this.setState({fieldType: \"login\", loginAlertMessage: \"invalid field! Choose either email or phone to login\"})\r\n            }\r\n        }\r\n    }\r\n\r\n    handleLeave = (fieldName:string, fieldValue:string) =>\r\n    {\r\n\r\n    }\r\n\r\n    render(){\r\n        return <form className=\"login-form\">\r\n            <TextFormField fieldName = \"login\" fieldType = {this.state.fieldType} alertMessage = {this.state.loginAlertMessage} onChange = {this.handleChange} onBlur = {this.handleLeave} key = \"login-form-field1\" />\r\n            <TextFormField fieldName = \"password\" fieldType = \"password\" alertMessage = {this.state.passwordAlertMessage} onChange = {this.handleChange} onBlur = {this.handleLeave} key = \"login-form-field2\" />\r\n            <SubmitFormButton buttonName=\"LOGIN\" key = \"login-form-button\" />\r\n        </form> \r\n    }\r\n}\r\n\r\nexport default LoginForm"]},"metadata":{},"sourceType":"module"}